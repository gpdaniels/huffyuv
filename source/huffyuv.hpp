#pragma once

#include <cstdio>

class huffyuv final {
public:
    constexpr static const int interlaced_threshold = 288;

public:
    enum class format_type {
        yuyv,
        bgr,
        bgra
    };

    enum class predictor_type {
        classic,
        left,
        gradient,
        median
    };

private:
    // Static Y,U,V or B,G,R or B-G,G,R-G (decorrelation) huffman tables for the different prediction modes.
    // Note: When processing RGBA data, A is processed with either the R table or the R-G table (decorrelation).
    class builtin_tables final {
    public:
        class rgb final {
        public:
            class classic final {
            public:
                constexpr static const unsigned char shift_b[256] = {
                    0x02, 0x04, 0x03, 0x05, 0x05, 0x07, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
                    0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D,
                    0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
                    0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0F,
                    0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
                    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x06, 0x06, 0x05, 0x05, 0x04, 0x04,
                };
                constexpr static const unsigned char shift_g[256] = {
                    0x02, 0x04, 0x03, 0x05, 0x05, 0x07, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
                    0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D,
                    0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
                    0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0F,
                    0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
                    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x06, 0x06, 0x05, 0x05, 0x04, 0x04,
                };
                constexpr static const unsigned char shift_r[256] = {
                    0x02, 0x04, 0x03, 0x05, 0x05, 0x07, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
                    0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D,
                    0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
                    0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0F,
                    0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
                    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x06, 0x06, 0x05, 0x05, 0x04, 0x04,
                };

                constexpr static const unsigned int add_shifted_b[256] = {
                    0xC0000000, 0x90000000, 0xA0000000, 0x60000000, 0x50000000, 0x46000000, 0x40000000, 0x3A000000, 0x36000000, 0x32000000, 0x30000000, 0x2D000000, 0x2C000000, 0x29000000, 0x27000000, 0x25000000,
                    0x24800000, 0x23000000, 0x22000000, 0x20800000, 0x20000000, 0x1E800000, 0x1D000000, 0x1C000000, 0x1A800000, 0x19000000, 0x18800000, 0x17000000, 0x16000000, 0x14800000, 0x13000000, 0x12000000,
                    0x11000000, 0x10400000, 0x0FC00000, 0x0F400000, 0x0E800000, 0x0DC00000, 0x0D400000, 0x0CC00000, 0x0C000000, 0x0B800000, 0x0B400000, 0x0AC00000, 0x0A400000, 0x09C00000, 0x09800000, 0x09000000,
                    0x08C00000, 0x08400000, 0x08000000, 0x07800000, 0x07400000, 0x06C00000, 0x06800000, 0x06400000, 0x06000000, 0x05E00000, 0x05C00000, 0x05800000, 0x05600000, 0x05200000, 0x05000000, 0x04E00000,
                    0x04A00000, 0x04800000, 0x04600000, 0x04400000, 0x04000000, 0x03E00000, 0x03C00000, 0x03800000, 0x03600000, 0x03400000, 0x03000000, 0x02E00000, 0x02C00000, 0x02800000, 0x02600000, 0x02500000,
                    0x02300000, 0x02200000, 0x02100000, 0x01F00000, 0x01E00000, 0x01D00000, 0x01B00000, 0x01A00000, 0x01800000, 0x01700000, 0x01500000, 0x01400000, 0x01200000, 0x01100000, 0x00F00000, 0x00E80000,
                    0x00D80000, 0x00D00000, 0x00C00000, 0x00B00000, 0x00A80000, 0x00980000, 0x00880000, 0x00800000, 0x00700000, 0x00680000, 0x00640000, 0x005C0000, 0x00540000, 0x004C0000, 0x00480000, 0x00400000,
                    0x003C0000, 0x00360000, 0x00320000, 0x002E0000, 0x002A0000, 0x00260000, 0x00220000, 0x00200000, 0x001C0000, 0x001A0000, 0x00190000, 0x00170000, 0x00150000, 0x00120000, 0x00110000, 0x000E0000,
                    0x000C0000, 0x00088000, 0x00098000, 0x00068000, 0x00020000, 0x00048000, 0x00010000, 0x00058000, 0x00008000, 0x00038000, 0x00040000, 0x00000000, 0x00080000, 0x00018000, 0x00070000, 0x00030000,
                    0x00060000, 0x00050000, 0x00028000, 0x00078000, 0x00090000, 0x000B0000, 0x000A0000, 0x000D0000, 0x000F0000, 0x00100000, 0x00130000, 0x00140000, 0x00160000, 0x00180000, 0x001B0000, 0x001E0000,
                    0x00240000, 0x00280000, 0x002C0000, 0x00300000, 0x00340000, 0x00380000, 0x00440000, 0x00500000, 0x00580000, 0x00600000, 0x006C0000, 0x00780000, 0x00900000, 0x00A00000, 0x00B80000, 0x00C80000,
                    0x00E00000, 0x01000000, 0x01300000, 0x01600000, 0x01900000, 0x01C00000, 0x02000000, 0x02400000, 0x02A00000, 0x03200000, 0x03A00000, 0x04200000, 0x04C00000, 0x05400000, 0x05A00000, 0x06200000,
                    0x07000000, 0x07C00000, 0x08800000, 0x09400000, 0x0A000000, 0x0A800000, 0x0B000000, 0x0BC00000, 0x0C400000, 0x0C800000, 0x0D000000, 0x0D800000, 0x0E000000, 0x0E400000, 0x0EC00000, 0x0F000000,
                    0x0F800000, 0x10000000, 0x10800000, 0x10C00000, 0x11400000, 0x11800000, 0x12800000, 0x13800000, 0x14000000, 0x15000000, 0x15800000, 0x16800000, 0x17800000, 0x18000000, 0x19800000, 0x1A000000,
                    0x1B000000, 0x1B800000, 0x1C800000, 0x1D800000, 0x1E000000, 0x1F000000, 0x1F800000, 0x21000000, 0x21800000, 0x22800000, 0x23800000, 0x24000000, 0x26000000, 0x28000000, 0x2A000000, 0x2B000000,
                    0x2E000000, 0x2F000000, 0x31000000, 0x33000000, 0x34000000, 0x38000000, 0x3C000000, 0x3E000000, 0x42000000, 0x44000000, 0x48000000, 0x4C000000, 0x58000000, 0x68000000, 0x70000000, 0x80000000,
                };
                constexpr static const unsigned int add_shifted_g[256] = {
                    0xC0000000, 0x90000000, 0xA0000000, 0x60000000, 0x50000000, 0x46000000, 0x40000000, 0x3A000000, 0x36000000, 0x32000000, 0x30000000, 0x2D000000, 0x2C000000, 0x29000000, 0x27000000, 0x25000000,
                    0x24800000, 0x23000000, 0x22000000, 0x20800000, 0x20000000, 0x1E800000, 0x1D000000, 0x1C000000, 0x1A800000, 0x19000000, 0x18800000, 0x17000000, 0x16000000, 0x14800000, 0x13000000, 0x12000000,
                    0x11000000, 0x10400000, 0x0FC00000, 0x0F400000, 0x0E800000, 0x0DC00000, 0x0D400000, 0x0CC00000, 0x0C000000, 0x0B800000, 0x0B400000, 0x0AC00000, 0x0A400000, 0x09C00000, 0x09800000, 0x09000000,
                    0x08C00000, 0x08400000, 0x08000000, 0x07800000, 0x07400000, 0x06C00000, 0x06800000, 0x06400000, 0x06000000, 0x05E00000, 0x05C00000, 0x05800000, 0x05600000, 0x05200000, 0x05000000, 0x04E00000,
                    0x04A00000, 0x04800000, 0x04600000, 0x04400000, 0x04000000, 0x03E00000, 0x03C00000, 0x03800000, 0x03600000, 0x03400000, 0x03000000, 0x02E00000, 0x02C00000, 0x02800000, 0x02600000, 0x02500000,
                    0x02300000, 0x02200000, 0x02100000, 0x01F00000, 0x01E00000, 0x01D00000, 0x01B00000, 0x01A00000, 0x01800000, 0x01700000, 0x01500000, 0x01400000, 0x01200000, 0x01100000, 0x00F00000, 0x00E80000,
                    0x00D80000, 0x00D00000, 0x00C00000, 0x00B00000, 0x00A80000, 0x00980000, 0x00880000, 0x00800000, 0x00700000, 0x00680000, 0x00640000, 0x005C0000, 0x00540000, 0x004C0000, 0x00480000, 0x00400000,
                    0x003C0000, 0x00360000, 0x00320000, 0x002E0000, 0x002A0000, 0x00260000, 0x00220000, 0x00200000, 0x001C0000, 0x001A0000, 0x00190000, 0x00170000, 0x00150000, 0x00120000, 0x00110000, 0x000E0000,
                    0x000C0000, 0x00088000, 0x00098000, 0x00068000, 0x00020000, 0x00048000, 0x00010000, 0x00058000, 0x00008000, 0x00038000, 0x00040000, 0x00000000, 0x00080000, 0x00018000, 0x00070000, 0x00030000,
                    0x00060000, 0x00050000, 0x00028000, 0x00078000, 0x00090000, 0x000B0000, 0x000A0000, 0x000D0000, 0x000F0000, 0x00100000, 0x00130000, 0x00140000, 0x00160000, 0x00180000, 0x001B0000, 0x001E0000,
                    0x00240000, 0x00280000, 0x002C0000, 0x00300000, 0x00340000, 0x00380000, 0x00440000, 0x00500000, 0x00580000, 0x00600000, 0x006C0000, 0x00780000, 0x00900000, 0x00A00000, 0x00B80000, 0x00C80000,
                    0x00E00000, 0x01000000, 0x01300000, 0x01600000, 0x01900000, 0x01C00000, 0x02000000, 0x02400000, 0x02A00000, 0x03200000, 0x03A00000, 0x04200000, 0x04C00000, 0x05400000, 0x05A00000, 0x06200000,
                    0x07000000, 0x07C00000, 0x08800000, 0x09400000, 0x0A000000, 0x0A800000, 0x0B000000, 0x0BC00000, 0x0C400000, 0x0C800000, 0x0D000000, 0x0D800000, 0x0E000000, 0x0E400000, 0x0EC00000, 0x0F000000,
                    0x0F800000, 0x10000000, 0x10800000, 0x10C00000, 0x11400000, 0x11800000, 0x12800000, 0x13800000, 0x14000000, 0x15000000, 0x15800000, 0x16800000, 0x17800000, 0x18000000, 0x19800000, 0x1A000000,
                    0x1B000000, 0x1B800000, 0x1C800000, 0x1D800000, 0x1E000000, 0x1F000000, 0x1F800000, 0x21000000, 0x21800000, 0x22800000, 0x23800000, 0x24000000, 0x26000000, 0x28000000, 0x2A000000, 0x2B000000,
                    0x2E000000, 0x2F000000, 0x31000000, 0x33000000, 0x34000000, 0x38000000, 0x3C000000, 0x3E000000, 0x42000000, 0x44000000, 0x48000000, 0x4C000000, 0x58000000, 0x68000000, 0x70000000, 0x80000000,
                };
                constexpr static const unsigned int add_shifted_r[256] = {
                    0xC0000000, 0x90000000, 0xA0000000, 0x60000000, 0x50000000, 0x46000000, 0x40000000, 0x3A000000, 0x36000000, 0x32000000, 0x30000000, 0x2D000000, 0x2C000000, 0x29000000, 0x27000000, 0x25000000,
                    0x24800000, 0x23000000, 0x22000000, 0x20800000, 0x20000000, 0x1E800000, 0x1D000000, 0x1C000000, 0x1A800000, 0x19000000, 0x18800000, 0x17000000, 0x16000000, 0x14800000, 0x13000000, 0x12000000,
                    0x11000000, 0x10400000, 0x0FC00000, 0x0F400000, 0x0E800000, 0x0DC00000, 0x0D400000, 0x0CC00000, 0x0C000000, 0x0B800000, 0x0B400000, 0x0AC00000, 0x0A400000, 0x09C00000, 0x09800000, 0x09000000,
                    0x08C00000, 0x08400000, 0x08000000, 0x07800000, 0x07400000, 0x06C00000, 0x06800000, 0x06400000, 0x06000000, 0x05E00000, 0x05C00000, 0x05800000, 0x05600000, 0x05200000, 0x05000000, 0x04E00000,
                    0x04A00000, 0x04800000, 0x04600000, 0x04400000, 0x04000000, 0x03E00000, 0x03C00000, 0x03800000, 0x03600000, 0x03400000, 0x03000000, 0x02E00000, 0x02C00000, 0x02800000, 0x02600000, 0x02500000,
                    0x02300000, 0x02200000, 0x02100000, 0x01F00000, 0x01E00000, 0x01D00000, 0x01B00000, 0x01A00000, 0x01800000, 0x01700000, 0x01500000, 0x01400000, 0x01200000, 0x01100000, 0x00F00000, 0x00E80000,
                    0x00D80000, 0x00D00000, 0x00C00000, 0x00B00000, 0x00A80000, 0x00980000, 0x00880000, 0x00800000, 0x00700000, 0x00680000, 0x00640000, 0x005C0000, 0x00540000, 0x004C0000, 0x00480000, 0x00400000,
                    0x003C0000, 0x00360000, 0x00320000, 0x002E0000, 0x002A0000, 0x00260000, 0x00220000, 0x00200000, 0x001C0000, 0x001A0000, 0x00190000, 0x00170000, 0x00150000, 0x00120000, 0x00110000, 0x000E0000,
                    0x000C0000, 0x00088000, 0x00098000, 0x00068000, 0x00020000, 0x00048000, 0x00010000, 0x00058000, 0x00008000, 0x00038000, 0x00040000, 0x00000000, 0x00080000, 0x00018000, 0x00070000, 0x00030000,
                    0x00060000, 0x00050000, 0x00028000, 0x00078000, 0x00090000, 0x000B0000, 0x000A0000, 0x000D0000, 0x000F0000, 0x00100000, 0x00130000, 0x00140000, 0x00160000, 0x00180000, 0x001B0000, 0x001E0000,
                    0x00240000, 0x00280000, 0x002C0000, 0x00300000, 0x00340000, 0x00380000, 0x00440000, 0x00500000, 0x00580000, 0x00600000, 0x006C0000, 0x00780000, 0x00900000, 0x00A00000, 0x00B80000, 0x00C80000,
                    0x00E00000, 0x01000000, 0x01300000, 0x01600000, 0x01900000, 0x01C00000, 0x02000000, 0x02400000, 0x02A00000, 0x03200000, 0x03A00000, 0x04200000, 0x04C00000, 0x05400000, 0x05A00000, 0x06200000,
                    0x07000000, 0x07C00000, 0x08800000, 0x09400000, 0x0A000000, 0x0A800000, 0x0B000000, 0x0BC00000, 0x0C400000, 0x0C800000, 0x0D000000, 0x0D800000, 0x0E000000, 0x0E400000, 0x0EC00000, 0x0F000000,
                    0x0F800000, 0x10000000, 0x10800000, 0x10C00000, 0x11400000, 0x11800000, 0x12800000, 0x13800000, 0x14000000, 0x15000000, 0x15800000, 0x16800000, 0x17800000, 0x18000000, 0x19800000, 0x1A000000,
                    0x1B000000, 0x1B800000, 0x1C800000, 0x1D800000, 0x1E000000, 0x1F000000, 0x1F800000, 0x21000000, 0x21800000, 0x22800000, 0x23800000, 0x24000000, 0x26000000, 0x28000000, 0x2A000000, 0x2B000000,
                    0x2E000000, 0x2F000000, 0x31000000, 0x33000000, 0x34000000, 0x38000000, 0x3C000000, 0x3E000000, 0x42000000, 0x44000000, 0x48000000, 0x4C000000, 0x58000000, 0x68000000, 0x70000000, 0x80000000,
                };
            };

            class left final {
            public:
                constexpr static const unsigned char shift_b[256] = {
                    0x03, 0x03, 0x03, 0x04, 0x05, 0x06, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B,
                    0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
                    0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
                    0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E,
                    0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D,
                    0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
                    0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x06, 0x05, 0x04, 0x03, 0x03,
                };
                constexpr static const unsigned char shift_g[256] = {
                    0x02, 0x03, 0x03, 0x05, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A,
                    0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
                    0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
                    0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E,
                    0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
                    0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
                    0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A,
                    0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x07, 0x06, 0x06, 0x05, 0x04, 0x03,
                };
                constexpr static const unsigned char shift_r[256] = {
                    0x02, 0x03, 0x04, 0x04, 0x05, 0x06, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B,
                    0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
                    0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
                    0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E,
                    0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E,
                    0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
                    0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x06, 0x05, 0x04, 0x04, 0x03,
                };

                constexpr static const unsigned int add_shifted_b[256] = {
                    0x60000000, 0x80000000, 0xA0000000, 0x40000000, 0x30000000, 0x28000000, 0x20000000, 0x22000000, 0x17000000, 0x18000000, 0x19000000, 0x1A000000, 0x10000000, 0x10800000, 0x11000000, 0x11800000,
                    0x12000000, 0x12800000, 0x0A000000, 0x0A400000, 0x0A800000, 0x0AC00000, 0x0B000000, 0x0B400000, 0x0B800000, 0x0BC00000, 0x0C000000, 0x0C400000, 0x0C800000, 0x0CC00000, 0x0D000000, 0x05400000,
                    0x05600000, 0x05800000, 0x05A00000, 0x05C00000, 0x05E00000, 0x06000000, 0x06200000, 0x06400000, 0x06600000, 0x06800000, 0x06A00000, 0x06C00000, 0x06E00000, 0x07000000, 0x07200000, 0x07400000,
                    0x07600000, 0x07800000, 0x02800000, 0x02900000, 0x02A00000, 0x02B00000, 0x02C00000, 0x02D00000, 0x02E00000, 0x02F00000, 0x03000000, 0x03100000, 0x03200000, 0x03300000, 0x03400000, 0x03500000,
                    0x03600000, 0x03700000, 0x03800000, 0x03900000, 0x03A00000, 0x03B00000, 0x03C00000, 0x03D00000, 0x00D80000, 0x00E00000, 0x00E80000, 0x00F00000, 0x00F80000, 0x01000000, 0x01080000, 0x01100000,
                    0x01180000, 0x01200000, 0x01280000, 0x01300000, 0x01380000, 0x01400000, 0x01480000, 0x01500000, 0x01580000, 0x01600000, 0x01680000, 0x01700000, 0x01780000, 0x01800000, 0x01880000, 0x01900000,
                    0x01980000, 0x01A00000, 0x01A80000, 0x01B00000, 0x00140000, 0x00180000, 0x001C0000, 0x00200000, 0x00240000, 0x00280000, 0x002C0000, 0x00300000, 0x00340000, 0x00380000, 0x003C0000, 0x00400000,
                    0x00440000, 0x00480000, 0x004C0000, 0x00500000, 0x00540000, 0x00580000, 0x005C0000, 0x00600000, 0x00640000, 0x00680000, 0x006C0000, 0x00700000, 0x00740000, 0x00780000, 0x007C0000, 0x00800000,
                    0x00840000, 0x00880000, 0x008C0000, 0x00900000, 0x00940000, 0x00000000, 0x00020000, 0x00040000, 0x00060000, 0x00080000, 0x000A0000, 0x000C0000, 0x000E0000, 0x00100000, 0x00980000, 0x00120000,
                    0x009C0000, 0x00A00000, 0x00A40000, 0x00A80000, 0x00AC0000, 0x00B00000, 0x00B40000, 0x00B80000, 0x00BC0000, 0x00C00000, 0x00C40000, 0x00C80000, 0x00CC0000, 0x00D00000, 0x00D40000, 0x01B80000,
                    0x01C00000, 0x01C80000, 0x01D00000, 0x01D80000, 0x01E00000, 0x01E80000, 0x01F00000, 0x01F80000, 0x02000000, 0x02080000, 0x02100000, 0x02180000, 0x02200000, 0x02280000, 0x02300000, 0x02380000,
                    0x02400000, 0x02480000, 0x02500000, 0x02580000, 0x02600000, 0x02680000, 0x02700000, 0x03E00000, 0x02780000, 0x03F00000, 0x04000000, 0x04100000, 0x04200000, 0x04300000, 0x04400000, 0x04500000,
                    0x04600000, 0x04700000, 0x04800000, 0x04900000, 0x04A00000, 0x04B00000, 0x04C00000, 0x04D00000, 0x04E00000, 0x04F00000, 0x05000000, 0x05100000, 0x05200000, 0x05300000, 0x07A00000, 0x07C00000,
                    0x07E00000, 0x08000000, 0x08200000, 0x08400000, 0x08600000, 0x08800000, 0x08A00000, 0x08C00000, 0x08E00000, 0x09000000, 0x09200000, 0x09400000, 0x09600000, 0x09800000, 0x09A00000, 0x09C00000,
                    0x09E00000, 0x0D400000, 0x0D800000, 0x0DC00000, 0x0E000000, 0x0E400000, 0x0E800000, 0x0EC00000, 0x0F000000, 0x0F400000, 0x0F800000, 0x0FC00000, 0x13000000, 0x13800000, 0x14000000, 0x14800000,
                    0x15000000, 0x15800000, 0x16000000, 0x16800000, 0x1B000000, 0x1C000000, 0x1D000000, 0x1E000000, 0x1F000000, 0x24000000, 0x26000000, 0x2C000000, 0x38000000, 0x50000000, 0xC0000000, 0xE0000000,
                };
                constexpr static const unsigned int add_shifted_g[256] = {
                    0xC0000000, 0x60000000, 0x80000000, 0x40000000, 0x30000000, 0x34000000, 0x26000000, 0x28000000, 0x1B000000, 0x1C000000, 0x1D000000, 0x1E000000, 0x1F000000, 0x11800000, 0x12000000, 0x12800000,
                    0x13000000, 0x13800000, 0x14000000, 0x14800000, 0x15000000, 0x15800000, 0x0A800000, 0x0AC00000, 0x0B000000, 0x0B400000, 0x0B800000, 0x0BC00000, 0x0C000000, 0x0C400000, 0x0C800000, 0x0CC00000,
                    0x0D000000, 0x0D400000, 0x0D800000, 0x0DC00000, 0x05400000, 0x05600000, 0x05800000, 0x05A00000, 0x05C00000, 0x05E00000, 0x06000000, 0x06200000, 0x06400000, 0x06600000, 0x06800000, 0x06A00000,
                    0x06C00000, 0x06E00000, 0x07000000, 0x07200000, 0x07400000, 0x07600000, 0x07800000, 0x07A00000, 0x07C00000, 0x07E00000, 0x02100000, 0x02200000, 0x02300000, 0x02400000, 0x02500000, 0x02600000,
                    0x02700000, 0x02800000, 0x02900000, 0x02A00000, 0x02B00000, 0x02C00000, 0x02D00000, 0x02E00000, 0x02F00000, 0x03000000, 0x03100000, 0x03200000, 0x03300000, 0x03400000, 0x03500000, 0x03600000,
                    0x03700000, 0x03800000, 0x00B80000, 0x00C00000, 0x00C80000, 0x00D00000, 0x00D80000, 0x00E00000, 0x00E80000, 0x00F00000, 0x00F80000, 0x01000000, 0x01080000, 0x01100000, 0x01180000, 0x01200000,
                    0x01280000, 0x01300000, 0x01380000, 0x01400000, 0x01480000, 0x01500000, 0x01580000, 0x01600000, 0x01680000, 0x01700000, 0x01780000, 0x01800000, 0x00000000, 0x00040000, 0x00080000, 0x000C0000,
                    0x00100000, 0x00140000, 0x00180000, 0x001C0000, 0x00200000, 0x00240000, 0x00280000, 0x002C0000, 0x00300000, 0x00340000, 0x00380000, 0x003C0000, 0x00400000, 0x00440000, 0x00480000, 0x004C0000,
                    0x00500000, 0x00540000, 0x00580000, 0x005C0000, 0x00600000, 0x00640000, 0x00680000, 0x006C0000, 0x00700000, 0x00740000, 0x00780000, 0x007C0000, 0x00800000, 0x00840000, 0x00880000, 0x008C0000,
                    0x00900000, 0x00940000, 0x00980000, 0x009C0000, 0x00A00000, 0x00A40000, 0x00A80000, 0x00AC0000, 0x00B00000, 0x00B40000, 0x01880000, 0x01900000, 0x01980000, 0x01A00000, 0x01A80000, 0x01B00000,
                    0x01B80000, 0x01C00000, 0x01C80000, 0x01D00000, 0x01D80000, 0x01E00000, 0x01E80000, 0x01F00000, 0x01F80000, 0x02000000, 0x02080000, 0x03900000, 0x03A00000, 0x03B00000, 0x03C00000, 0x03D00000,
                    0x03E00000, 0x03F00000, 0x04000000, 0x04100000, 0x04200000, 0x04300000, 0x04400000, 0x04500000, 0x04600000, 0x04700000, 0x04800000, 0x04900000, 0x04A00000, 0x04B00000, 0x04C00000, 0x04D00000,
                    0x04E00000, 0x04F00000, 0x05000000, 0x05100000, 0x05200000, 0x05300000, 0x08000000, 0x08200000, 0x08400000, 0x08600000, 0x08800000, 0x08A00000, 0x08C00000, 0x08E00000, 0x09000000, 0x09200000,
                    0x09400000, 0x09600000, 0x09800000, 0x09A00000, 0x09C00000, 0x09E00000, 0x0A000000, 0x0A200000, 0x0A400000, 0x0A600000, 0x0E000000, 0x0E400000, 0x0E800000, 0x0EC00000, 0x0F000000, 0x0F400000,
                    0x0F800000, 0x0FC00000, 0x10000000, 0x10400000, 0x10800000, 0x10C00000, 0x11000000, 0x11400000, 0x16000000, 0x16800000, 0x17000000, 0x17800000, 0x18000000, 0x18800000, 0x19000000, 0x19800000,
                    0x1A000000, 0x1A800000, 0x20000000, 0x21000000, 0x22000000, 0x23000000, 0x24000000, 0x25000000, 0x2A000000, 0x2C000000, 0x2E000000, 0x38000000, 0x3C000000, 0x48000000, 0x50000000, 0xA0000000,
                };
                constexpr static const unsigned int add_shifted_r[256] = {
                    0xC0000000, 0x80000000, 0x40000000, 0x50000000, 0x30000000, 0x28000000, 0x20000000, 0x22000000, 0x17000000, 0x18000000, 0x19000000, 0x1A000000, 0x0F800000, 0x10000000, 0x10800000, 0x11000000,
                    0x11800000, 0x12000000, 0x12800000, 0x0A000000, 0x0A400000, 0x0A800000, 0x0AC00000, 0x0B000000, 0x0B400000, 0x0B800000, 0x0BC00000, 0x0C000000, 0x0C400000, 0x0C800000, 0x05600000, 0x05800000,
                    0x05A00000, 0x05C00000, 0x05E00000, 0x06000000, 0x06200000, 0x06400000, 0x06600000, 0x06800000, 0x06A00000, 0x06C00000, 0x06E00000, 0x07000000, 0x07200000, 0x07400000, 0x07600000, 0x07800000,
                    0x02900000, 0x02A00000, 0x02B00000, 0x02C00000, 0x02D00000, 0x02E00000, 0x02F00000, 0x03000000, 0x03100000, 0x03200000, 0x03300000, 0x03400000, 0x03500000, 0x03600000, 0x03700000, 0x03800000,
                    0x03900000, 0x03A00000, 0x03B00000, 0x03C00000, 0x03D00000, 0x03E00000, 0x03F00000, 0x04000000, 0x00F80000, 0x01000000, 0x01080000, 0x01100000, 0x01180000, 0x01200000, 0x01280000, 0x01300000,
                    0x01380000, 0x01400000, 0x01480000, 0x01500000, 0x01580000, 0x01600000, 0x01680000, 0x01700000, 0x01780000, 0x01800000, 0x01880000, 0x01900000, 0x01980000, 0x01A00000, 0x01A80000, 0x01B00000,
                    0x01B80000, 0x01C00000, 0x01C80000, 0x01D00000, 0x00000000, 0x01D80000, 0x00040000, 0x00080000, 0x000C0000, 0x00100000, 0x00140000, 0x00180000, 0x001C0000, 0x00200000, 0x00240000, 0x00280000,
                    0x002C0000, 0x00300000, 0x00340000, 0x00380000, 0x003C0000, 0x00400000, 0x00440000, 0x00480000, 0x004C0000, 0x00500000, 0x00540000, 0x00580000, 0x005C0000, 0x00600000, 0x00640000, 0x00680000,
                    0x006C0000, 0x00700000, 0x00740000, 0x00780000, 0x007C0000, 0x00800000, 0x00840000, 0x00880000, 0x008C0000, 0x00900000, 0x00940000, 0x00980000, 0x009C0000, 0x00A00000, 0x00A40000, 0x00A80000,
                    0x00AC0000, 0x00B00000, 0x00B40000, 0x00B80000, 0x00BC0000, 0x00C00000, 0x00C40000, 0x00C80000, 0x00CC0000, 0x00D00000, 0x00D40000, 0x00D80000, 0x00DC0000, 0x00E00000, 0x00E40000, 0x00E80000,
                    0x00EC0000, 0x00F00000, 0x00F40000, 0x01E00000, 0x01E80000, 0x01F00000, 0x01F80000, 0x02000000, 0x02080000, 0x02100000, 0x02180000, 0x02200000, 0x02280000, 0x02300000, 0x02380000, 0x02400000,
                    0x02480000, 0x02500000, 0x02580000, 0x02600000, 0x02680000, 0x02700000, 0x02780000, 0x02800000, 0x02880000, 0x04100000, 0x04200000, 0x04300000, 0x04400000, 0x04500000, 0x04600000, 0x04700000,
                    0x04800000, 0x04900000, 0x04A00000, 0x04B00000, 0x04C00000, 0x04D00000, 0x04E00000, 0x04F00000, 0x05000000, 0x05100000, 0x05200000, 0x05300000, 0x05400000, 0x05500000, 0x07A00000, 0x07C00000,
                    0x07E00000, 0x08000000, 0x08200000, 0x08400000, 0x08600000, 0x08800000, 0x08A00000, 0x08C00000, 0x08E00000, 0x09000000, 0x09200000, 0x09400000, 0x09600000, 0x09800000, 0x09A00000, 0x09C00000,
                    0x09E00000, 0x0CC00000, 0x0D000000, 0x0D400000, 0x0D800000, 0x0DC00000, 0x0E000000, 0x0E400000, 0x0E800000, 0x0EC00000, 0x0F000000, 0x0F400000, 0x13000000, 0x13800000, 0x14000000, 0x14800000,
                    0x15000000, 0x15800000, 0x16000000, 0x16800000, 0x1B000000, 0x1C000000, 0x1D000000, 0x1E000000, 0x1F000000, 0x24000000, 0x26000000, 0x2C000000, 0x38000000, 0x60000000, 0x70000000, 0xA0000000,
                };
            };

            class left_decorrelate final {
            public:
                constexpr static const unsigned char shift_bg[256] = {
                    0x02, 0x03, 0x03, 0x04, 0x05, 0x06, 0x07, 0x09, 0x09, 0x0A, 0x0B, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
                    0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x13, 0x12, 0x12, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x14, 0x14,
                    0x14, 0x14, 0x14, 0x15, 0x14, 0x15, 0x15, 0x15, 0x15, 0x15, 0x16, 0x15, 0x16, 0x16, 0x16, 0x17, 0x17, 0x16, 0x18, 0x1A, 0x18, 0x18, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x19, 0x1A, 0x1A, 0x19,
                    0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x18, 0x19, 0x1A, 0x19, 0x19, 0x1A, 0x1A, 0x18, 0x17, 0x18, 0x19, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x15, 0x15, 0x15, 0x15, 0x15, 0x14, 0x14, 0x14, 0x14,
                    0x14, 0x14, 0x14, 0x14, 0x14, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x10, 0x10, 0x10, 0x10,
                    0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0D, 0x0C, 0x0B, 0x0B, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x03,
                };
                constexpr static const unsigned char shift_g[256] = {
                    0x02, 0x03, 0x03, 0x05, 0x06, 0x06, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A,
                    0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
                    0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
                    0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E,
                    0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
                    0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
                    0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A,
                    0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x07, 0x06, 0x06, 0x05, 0x04, 0x03,
                };
                constexpr static const unsigned char shift_rg[256] = {
                    0x02, 0x03, 0x03, 0x04, 0x06, 0x06, 0x07, 0x08, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F,
                    0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x12, 0x11, 0x12, 0x12, 0x11, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12,
                    0x11, 0x12, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x13, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x18, 0x1A, 0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x18, 0x17, 0x17, 0x16, 0x16, 0x15,
                    0x15, 0x14, 0x15, 0x14, 0x14, 0x14, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x12, 0x13, 0x13, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x10, 0x10, 0x10, 0x10,
                    0x10, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x03,
                };

                constexpr static const unsigned int add_shifted_bg[256] = {
                    0xC0000000, 0x40000000, 0x60000000, 0x20000000, 0x10000000, 0x08000000, 0x04000000, 0x01800000, 0x02000000, 0x01400000, 0x00E00000, 0x00B00000, 0x00C00000, 0x00700000, 0x00780000, 0x00800000,
                    0x00880000, 0x00900000, 0x00380000, 0x003C0000, 0x00400000, 0x00440000, 0x00480000, 0x004C0000, 0x00500000, 0x00540000, 0x00580000, 0x00200000, 0x00220000, 0x00240000, 0x00260000, 0x00280000,
                    0x002A0000, 0x000F0000, 0x00100000, 0x00110000, 0x00120000, 0x00130000, 0x00140000, 0x00078000, 0x00080000, 0x00088000, 0x00090000, 0x00098000, 0x000A0000, 0x000A8000, 0x00038000, 0x0003C000,
                    0x00040000, 0x00044000, 0x00048000, 0x0004C000, 0x0001A000, 0x00050000, 0x00054000, 0x0001C000, 0x0001E000, 0x00020000, 0x00022000, 0x00024000, 0x00026000, 0x00028000, 0x0000B000, 0x0000C000,
                    0x0000D000, 0x0000E000, 0x0000F000, 0x00005000, 0x00010000, 0x00005800, 0x00006000, 0x00006800, 0x00007000, 0x00007800, 0x00002800, 0x00008000, 0x00002C00, 0x00003000, 0x00003400, 0x00002000,
                    0x00002200, 0x00003800, 0x00001A00, 0x00000000, 0x00001B00, 0x00001C00, 0x00001200, 0x00001280, 0x00001300, 0x00001380, 0x00000040, 0x00000080, 0x000000C0, 0x00000100, 0x00000140, 0x00000180,
                    0x000001C0, 0x00000200, 0x00000240, 0x00000280, 0x000002C0, 0x00000300, 0x00000340, 0x00000380, 0x000003C0, 0x00001400, 0x00000400, 0x00000440, 0x00000480, 0x000004C0, 0x00000500, 0x00000540,
                    0x00000580, 0x000005C0, 0x00000600, 0x00000640, 0x00000680, 0x000006C0, 0x00000700, 0x00000740, 0x00000780, 0x000007C0, 0x00000800, 0x00000840, 0x00000880, 0x000008C0, 0x00000900, 0x00000940,
                    0x00000980, 0x000009C0, 0x00000A00, 0x00000A40, 0x00000A80, 0x00000AC0, 0x00000B00, 0x00000B40, 0x00000B80, 0x00000BC0, 0x00000C00, 0x00000C40, 0x00000C80, 0x00000CC0, 0x00000D00, 0x00000D40,
                    0x00001480, 0x00000D80, 0x00000DC0, 0x00000E00, 0x00001500, 0x00001580, 0x00000E40, 0x00000E80, 0x00000EC0, 0x00000F00, 0x00000F40, 0x00001600, 0x00001680, 0x00000F80, 0x00000FC0, 0x00001700,
                    0x00001780, 0x00001000, 0x00001040, 0x00001080, 0x000010C0, 0x00001100, 0x00001D00, 0x00001800, 0x00001140, 0x00001880, 0x00001900, 0x00001180, 0x000011C0, 0x00001E00, 0x00002400, 0x00001F00,
                    0x00001980, 0x00002600, 0x00003C00, 0x00004000, 0x00004400, 0x00004800, 0x00004C00, 0x00008800, 0x00009000, 0x00009800, 0x0000A000, 0x0000A800, 0x00011000, 0x00012000, 0x00013000, 0x00014000,
                    0x00015000, 0x00016000, 0x00017000, 0x00018000, 0x00019000, 0x0002A000, 0x0002C000, 0x0002E000, 0x00030000, 0x00032000, 0x00034000, 0x00036000, 0x00058000, 0x0005C000, 0x00060000, 0x00064000,
                    0x00068000, 0x0006C000, 0x00070000, 0x00074000, 0x000B0000, 0x000B8000, 0x000C0000, 0x000C8000, 0x000D0000, 0x000D8000, 0x000E0000, 0x000E8000, 0x00150000, 0x00160000, 0x00170000, 0x00180000,
                    0x00190000, 0x001A0000, 0x001B0000, 0x001C0000, 0x001D0000, 0x001E0000, 0x001F0000, 0x002C0000, 0x002E0000, 0x00300000, 0x00320000, 0x00340000, 0x00360000, 0x005C0000, 0x00600000, 0x00640000,
                    0x00680000, 0x006C0000, 0x00980000, 0x00A00000, 0x00A80000, 0x00D00000, 0x01000000, 0x01200000, 0x02800000, 0x03000000, 0x06000000, 0x0C000000, 0x18000000, 0x30000000, 0x80000000, 0xA0000000,
                };
                constexpr static const unsigned int add_shifted_g[256] = {
                    0xC0000000, 0x60000000, 0x80000000, 0x40000000, 0x30000000, 0x34000000, 0x26000000, 0x28000000, 0x1B000000, 0x1C000000, 0x1D000000, 0x1E000000, 0x1F000000, 0x11800000, 0x12000000, 0x12800000,
                    0x13000000, 0x13800000, 0x14000000, 0x14800000, 0x15000000, 0x15800000, 0x0A800000, 0x0AC00000, 0x0B000000, 0x0B400000, 0x0B800000, 0x0BC00000, 0x0C000000, 0x0C400000, 0x0C800000, 0x0CC00000,
                    0x0D000000, 0x0D400000, 0x0D800000, 0x0DC00000, 0x05400000, 0x05600000, 0x05800000, 0x05A00000, 0x05C00000, 0x05E00000, 0x06000000, 0x06200000, 0x06400000, 0x06600000, 0x06800000, 0x06A00000,
                    0x06C00000, 0x06E00000, 0x07000000, 0x07200000, 0x07400000, 0x07600000, 0x07800000, 0x07A00000, 0x07C00000, 0x07E00000, 0x02100000, 0x02200000, 0x02300000, 0x02400000, 0x02500000, 0x02600000,
                    0x02700000, 0x02800000, 0x02900000, 0x02A00000, 0x02B00000, 0x02C00000, 0x02D00000, 0x02E00000, 0x02F00000, 0x03000000, 0x03100000, 0x03200000, 0x03300000, 0x03400000, 0x03500000, 0x03600000,
                    0x03700000, 0x03800000, 0x00B80000, 0x00C00000, 0x00C80000, 0x00D00000, 0x00D80000, 0x00E00000, 0x00E80000, 0x00F00000, 0x00F80000, 0x01000000, 0x01080000, 0x01100000, 0x01180000, 0x01200000,
                    0x01280000, 0x01300000, 0x01380000, 0x01400000, 0x01480000, 0x01500000, 0x01580000, 0x01600000, 0x01680000, 0x01700000, 0x01780000, 0x01800000, 0x00000000, 0x00040000, 0x00080000, 0x000C0000,
                    0x00100000, 0x00140000, 0x00180000, 0x001C0000, 0x00200000, 0x00240000, 0x00280000, 0x002C0000, 0x00300000, 0x00340000, 0x00380000, 0x003C0000, 0x00400000, 0x00440000, 0x00480000, 0x004C0000,
                    0x00500000, 0x00540000, 0x00580000, 0x005C0000, 0x00600000, 0x00640000, 0x00680000, 0x006C0000, 0x00700000, 0x00740000, 0x00780000, 0x007C0000, 0x00800000, 0x00840000, 0x00880000, 0x008C0000,
                    0x00900000, 0x00940000, 0x00980000, 0x009C0000, 0x00A00000, 0x00A40000, 0x00A80000, 0x00AC0000, 0x00B00000, 0x00B40000, 0x01880000, 0x01900000, 0x01980000, 0x01A00000, 0x01A80000, 0x01B00000,
                    0x01B80000, 0x01C00000, 0x01C80000, 0x01D00000, 0x01D80000, 0x01E00000, 0x01E80000, 0x01F00000, 0x01F80000, 0x02000000, 0x02080000, 0x03900000, 0x03A00000, 0x03B00000, 0x03C00000, 0x03D00000,
                    0x03E00000, 0x03F00000, 0x04000000, 0x04100000, 0x04200000, 0x04300000, 0x04400000, 0x04500000, 0x04600000, 0x04700000, 0x04800000, 0x04900000, 0x04A00000, 0x04B00000, 0x04C00000, 0x04D00000,
                    0x04E00000, 0x04F00000, 0x05000000, 0x05100000, 0x05200000, 0x05300000, 0x08000000, 0x08200000, 0x08400000, 0x08600000, 0x08800000, 0x08A00000, 0x08C00000, 0x08E00000, 0x09000000, 0x09200000,
                    0x09400000, 0x09600000, 0x09800000, 0x09A00000, 0x09C00000, 0x09E00000, 0x0A000000, 0x0A200000, 0x0A400000, 0x0A600000, 0x0E000000, 0x0E400000, 0x0E800000, 0x0EC00000, 0x0F000000, 0x0F400000,
                    0x0F800000, 0x0FC00000, 0x10000000, 0x10400000, 0x10800000, 0x10C00000, 0x11000000, 0x11400000, 0x16000000, 0x16800000, 0x17000000, 0x17800000, 0x18000000, 0x18800000, 0x19000000, 0x19800000,
                    0x1A000000, 0x1A800000, 0x20000000, 0x21000000, 0x22000000, 0x23000000, 0x24000000, 0x25000000, 0x2A000000, 0x2C000000, 0x2E000000, 0x38000000, 0x3C000000, 0x48000000, 0x50000000, 0xA0000000,
                };
                constexpr static const unsigned int add_shifted_rg[256] = {
                    0xC0000000, 0x40000000, 0x60000000, 0x20000000, 0x0C000000, 0x10000000, 0x08000000, 0x06000000, 0x03000000, 0x03800000, 0x04000000, 0x04800000, 0x01800000, 0x01C00000, 0x00E00000, 0x01000000,
                    0x01200000, 0x00900000, 0x00A00000, 0x00680000, 0x00700000, 0x00780000, 0x00340000, 0x00380000, 0x003C0000, 0x00400000, 0x00440000, 0x00480000, 0x004C0000, 0x001E0000, 0x00200000, 0x00220000,
                    0x00240000, 0x00260000, 0x00280000, 0x00120000, 0x00130000, 0x00140000, 0x00150000, 0x00160000, 0x00170000, 0x00180000, 0x00078000, 0x00080000, 0x00088000, 0x00090000, 0x00098000, 0x000A0000,
                    0x000A8000, 0x000B0000, 0x000B8000, 0x00020000, 0x000C0000, 0x00024000, 0x00028000, 0x000C8000, 0x0002C000, 0x00030000, 0x00034000, 0x00038000, 0x0003C000, 0x00040000, 0x00044000, 0x00048000,
                    0x000D0000, 0x0004C000, 0x000D8000, 0x000E0000, 0x000E8000, 0x00050000, 0x00054000, 0x00058000, 0x0000A000, 0x0000C000, 0x00005000, 0x00003000, 0x00002400, 0x00001E00, 0x00001B00, 0x00001C00,
                    0x00000000, 0x00000040, 0x00001A00, 0x00000080, 0x000000C0, 0x00000100, 0x00000140, 0x00000180, 0x000001C0, 0x00000200, 0x00000240, 0x00000280, 0x000002C0, 0x00000300, 0x00000340, 0x00000380,
                    0x000003C0, 0x00000400, 0x00000440, 0x00000480, 0x000004C0, 0x00000500, 0x00000540, 0x00000580, 0x000005C0, 0x00000600, 0x00000640, 0x00000680, 0x000006C0, 0x00000700, 0x00000740, 0x00000780,
                    0x000007C0, 0x00000800, 0x00000840, 0x00000880, 0x000008C0, 0x00000900, 0x00000940, 0x00000980, 0x000009C0, 0x00000A00, 0x00000A40, 0x00000A80, 0x00000AC0, 0x00000B00, 0x00000B40, 0x00000B80,
                    0x00000BC0, 0x00000C00, 0x00000C40, 0x00000C80, 0x00000CC0, 0x00000D00, 0x00000D40, 0x00000D80, 0x00000DC0, 0x00000E00, 0x00000E40, 0x00000E80, 0x00000EC0, 0x00000F00, 0x00000F40, 0x00000F80,
                    0x00000FC0, 0x00001000, 0x00001040, 0x00001080, 0x000010C0, 0x00001100, 0x00001140, 0x00001180, 0x000011C0, 0x00001200, 0x00001240, 0x00001280, 0x000012C0, 0x00001300, 0x00001340, 0x00001380,
                    0x000013C0, 0x00001400, 0x00001440, 0x00001480, 0x000014C0, 0x00001500, 0x00001540, 0x00001580, 0x000015C0, 0x00001600, 0x00001640, 0x00001680, 0x000016C0, 0x00001700, 0x00001740, 0x00001780,
                    0x000017C0, 0x00001800, 0x00001840, 0x00001880, 0x000018C0, 0x00001900, 0x00001940, 0x00001980, 0x000019C0, 0x00001A80, 0x00001D00, 0x00002000, 0x00002200, 0x00002800, 0x00002C00, 0x00003800,
                    0x00004000, 0x00006000, 0x00004800, 0x00007000, 0x00008000, 0x00009000, 0x0000E000, 0x00010000, 0x00012000, 0x00014000, 0x00016000, 0x00018000, 0x0001A000, 0x0005C000, 0x0001C000, 0x0001E000,
                    0x00060000, 0x00064000, 0x00068000, 0x0006C000, 0x00070000, 0x00074000, 0x000F0000, 0x000F8000, 0x00100000, 0x00108000, 0x00110000, 0x00118000, 0x00190000, 0x001A0000, 0x001B0000, 0x001C0000,
                    0x001D0000, 0x002A0000, 0x002C0000, 0x002E0000, 0x00300000, 0x00320000, 0x00500000, 0x00540000, 0x00580000, 0x005C0000, 0x00600000, 0x00640000, 0x00800000, 0x00880000, 0x00B00000, 0x00C00000,
                    0x00D00000, 0x01400000, 0x01600000, 0x02000000, 0x02400000, 0x02800000, 0x02C00000, 0x05000000, 0x05800000, 0x07000000, 0x0A000000, 0x14000000, 0x18000000, 0x30000000, 0x80000000, 0xA0000000,
                };
            };

            class gradient_decorrelate final {
            public:
                constexpr static const unsigned char shift_bg[256] = {
                    0x02, 0x03, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10,
                    0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x13, 0x13, 0x13, 0x13, 0x13, 0x14, 0x14, 0x14, 0x14, 0x14, 0x15, 0x15, 0x15, 0x15, 0x15,
                    0x16, 0x15, 0x15, 0x15, 0x16, 0x15, 0x16, 0x17, 0x16, 0x17, 0x16, 0x15, 0x17, 0x15, 0x15, 0x17, 0x16, 0x16, 0x17, 0x16, 0x16, 0x19, 0x18, 0x19, 0x17, 0x17, 0x19, 0x18, 0x19, 0x19, 0x18, 0x19,
                    0x19, 0x19, 0x18, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
                    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
                    0x19, 0x19, 0x19, 0x19, 0x19, 0x17, 0x19, 0x19, 0x17, 0x19, 0x19, 0x18, 0x18, 0x17, 0x17, 0x17, 0x18, 0x17, 0x17, 0x17, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x15, 0x17, 0x16, 0x15, 0x15,
                    0x15, 0x15, 0x15, 0x14, 0x15, 0x15, 0x13, 0x14, 0x13, 0x13, 0x13, 0x13, 0x13, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x10,
                    0x10, 0x10, 0x10, 0x10, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0A, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x03,
                };
                constexpr static const unsigned char shift_g[256] = {
                    0x02, 0x03, 0x03, 0x05, 0x06, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B,
                    0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D,
                    0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
                    0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x12, 0x13, 0x12, 0x13, 0x13, 0x13, 0x13, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x15, 0x14, 0x15, 0x14, 0x14, 0x14,
                    0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x13, 0x14, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                    0x11, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E,
                    0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x07, 0x06, 0x05, 0x03, 0x03,
                };
                constexpr static const unsigned char shift_rg[256] = {
                    0x02, 0x03, 0x03, 0x04, 0x06, 0x07, 0x08, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10,
                    0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x12, 0x12, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x14, 0x14, 0x14, 0x14, 0x15, 0x14, 0x15, 0x16, 0x16, 0x16, 0x17, 0x16, 0x16, 0x16,
                    0x17, 0x17, 0x18, 0x18, 0x17, 0x19, 0x18, 0x18, 0x17, 0x18, 0x19, 0x17, 0x18, 0x18, 0x19, 0x18, 0x19, 0x18, 0x18, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 0x19, 0x18, 0x19, 0x19, 0x19, 0x18, 0x19,
                    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
                    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
                    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x18, 0x18, 0x17, 0x17, 0x16, 0x16, 0x15, 0x16, 0x15, 0x15, 0x14, 0x15, 0x15, 0x14, 0x14, 0x14, 0x14, 0x15, 0x14, 0x14,
                    0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x12, 0x13, 0x13, 0x13, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11,
                    0x11, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0A, 0x08, 0x07, 0x06, 0x03, 0x03, 0x03,
                };

                constexpr static const unsigned int add_shifted_bg[256] = {
                    0xC0000000, 0x40000000, 0x60000000, 0x20000000, 0x10000000, 0x08000000, 0x04000000, 0x02000000, 0x01800000, 0x01000000, 0x01200000, 0x00A00000, 0x00B00000, 0x00C00000, 0x00580000, 0x00600000,
                    0x00680000, 0x00700000, 0x00300000, 0x00340000, 0x00380000, 0x003C0000, 0x00400000, 0x001A0000, 0x001C0000, 0x001E0000, 0x00200000, 0x00220000, 0x00240000, 0x000F0000, 0x00100000, 0x00110000,
                    0x00120000, 0x00130000, 0x00140000, 0x00070000, 0x00078000, 0x00080000, 0x00088000, 0x00090000, 0x00098000, 0x000A0000, 0x000A8000, 0x00030000, 0x00034000, 0x00038000, 0x0003C000, 0x00040000,
                    0x00044000, 0x0001A000, 0x0001C000, 0x0001E000, 0x00020000, 0x00022000, 0x00013000, 0x00014000, 0x00015000, 0x00016000, 0x00017000, 0x00009000, 0x00009800, 0x0000A000, 0x0000A800, 0x0000B000,
                    0x00005000, 0x0000B800, 0x0000C000, 0x0000C800, 0x00005400, 0x0000D000, 0x00005800, 0x00002E00, 0x00005C00, 0x00003000, 0x00006000, 0x0000D800, 0x00003200, 0x0000E000, 0x0000E800, 0x00003400,
                    0x00006400, 0x00006800, 0x00003600, 0x00006C00, 0x00007000, 0x00000000, 0x00002700, 0x00000080, 0x00003800, 0x00003A00, 0x00000100, 0x00002800, 0x00000180, 0x00000200, 0x00002900, 0x00000280,
                    0x00000300, 0x00000380, 0x00002A00, 0x00000400, 0x00000480, 0x00000500, 0x00000580, 0x00000600, 0x00000680, 0x00000700, 0x00000780, 0x00000800, 0x00000880, 0x00000900, 0x00000980, 0x00000A00,
                    0x00000A80, 0x00000B00, 0x00000B80, 0x00000C00, 0x00000C80, 0x00000D00, 0x00000D80, 0x00000E00, 0x00000E80, 0x00000F00, 0x00000F80, 0x00001000, 0x00001080, 0x00001100, 0x00001180, 0x00001200,
                    0x00001280, 0x00001300, 0x00001380, 0x00001400, 0x00001480, 0x00001500, 0x00001580, 0x00001600, 0x00001680, 0x00001700, 0x00001780, 0x00001800, 0x00001880, 0x00001900, 0x00001980, 0x00001A00,
                    0x00001A80, 0x00001B00, 0x00001B80, 0x00001C00, 0x00001C80, 0x00001D00, 0x00001D80, 0x00001E00, 0x00001E80, 0x00001F00, 0x00001F80, 0x00002000, 0x00002080, 0x00002100, 0x00002180, 0x00002200,
                    0x00002280, 0x00002300, 0x00002380, 0x00002400, 0x00002480, 0x00003C00, 0x00002500, 0x00002580, 0x00003E00, 0x00002600, 0x00002680, 0x00002B00, 0x00002C00, 0x00004000, 0x00004200, 0x00004400,
                    0x00002D00, 0x00004600, 0x00004800, 0x00004A00, 0x00004C00, 0x00007400, 0x00007800, 0x00007C00, 0x00008000, 0x00008400, 0x00008800, 0x0000F000, 0x00004E00, 0x00008C00, 0x0000F800, 0x00010000,
                    0x00010800, 0x00011000, 0x00011800, 0x00018000, 0x00012000, 0x00012800, 0x00024000, 0x00019000, 0x00026000, 0x00028000, 0x0002A000, 0x0002C000, 0x0002E000, 0x00048000, 0x0004C000, 0x00050000,
                    0x00054000, 0x00058000, 0x0005C000, 0x00060000, 0x00064000, 0x00068000, 0x0006C000, 0x000B0000, 0x000B8000, 0x000C0000, 0x000C8000, 0x000D0000, 0x000D8000, 0x000E0000, 0x000E8000, 0x00150000,
                    0x00160000, 0x00170000, 0x00180000, 0x00190000, 0x00260000, 0x00280000, 0x002A0000, 0x002C0000, 0x002E0000, 0x00440000, 0x00480000, 0x004C0000, 0x00500000, 0x00540000, 0x00780000, 0x00800000,
                    0x00880000, 0x00900000, 0x00980000, 0x00D00000, 0x00E00000, 0x00F00000, 0x01400000, 0x01600000, 0x01C00000, 0x03000000, 0x06000000, 0x0C000000, 0x18000000, 0x30000000, 0x80000000, 0xA0000000,
                };
                constexpr static const unsigned int add_shifted_g[256] = {
                    0xC0000000, 0x40000000, 0x60000000, 0x30000000, 0x28000000, 0x1C000000, 0x1E000000, 0x20000000, 0x13000000, 0x14000000, 0x15000000, 0x16000000, 0x0B800000, 0x0C000000, 0x0C800000, 0x0D000000,
                    0x0D800000, 0x0E000000, 0x0E800000, 0x0F000000, 0x05C00000, 0x06000000, 0x06400000, 0x06800000, 0x06C00000, 0x07000000, 0x07400000, 0x07800000, 0x07C00000, 0x08000000, 0x08400000, 0x02800000,
                    0x02A00000, 0x02C00000, 0x02E00000, 0x03000000, 0x03200000, 0x03400000, 0x03600000, 0x03800000, 0x03A00000, 0x03C00000, 0x03E00000, 0x04000000, 0x01400000, 0x01500000, 0x01600000, 0x01700000,
                    0x01800000, 0x01900000, 0x01A00000, 0x01B00000, 0x01C00000, 0x01D00000, 0x01E00000, 0x00A00000, 0x00A80000, 0x00B00000, 0x00B80000, 0x00C00000, 0x00C80000, 0x00D00000, 0x00D80000, 0x00E00000,
                    0x00E80000, 0x00500000, 0x00540000, 0x00580000, 0x005C0000, 0x00600000, 0x00640000, 0x00680000, 0x006C0000, 0x00700000, 0x00740000, 0x00780000, 0x00260000, 0x00280000, 0x002A0000, 0x002C0000,
                    0x002E0000, 0x00300000, 0x00320000, 0x00340000, 0x00360000, 0x00380000, 0x000D0000, 0x000E0000, 0x000F0000, 0x00100000, 0x00110000, 0x00120000, 0x00130000, 0x00140000, 0x00150000, 0x00160000,
                    0x00170000, 0x00180000, 0x00190000, 0x00068000, 0x00070000, 0x00078000, 0x00080000, 0x00088000, 0x00090000, 0x00030000, 0x00034000, 0x00038000, 0x0003C000, 0x00014000, 0x00040000, 0x00016000,
                    0x00018000, 0x0001A000, 0x0001C000, 0x00001000, 0x00002000, 0x00003000, 0x00004000, 0x00005000, 0x00006000, 0x00007000, 0x00000000, 0x00008000, 0x00000800, 0x00009000, 0x0000A000, 0x0000B000,
                    0x0000C000, 0x0000D000, 0x0000E000, 0x0000F000, 0x00010000, 0x00011000, 0x00012000, 0x0001E000, 0x00013000, 0x00020000, 0x00022000, 0x00024000, 0x00026000, 0x00028000, 0x0002A000, 0x0002C000,
                    0x0002E000, 0x00044000, 0x00048000, 0x0004C000, 0x00050000, 0x00054000, 0x00058000, 0x0005C000, 0x00060000, 0x00064000, 0x00098000, 0x000A0000, 0x000A8000, 0x000B0000, 0x000B8000, 0x000C0000,
                    0x000C8000, 0x001A0000, 0x001B0000, 0x001C0000, 0x001D0000, 0x001E0000, 0x001F0000, 0x00200000, 0x00210000, 0x00220000, 0x00230000, 0x00240000, 0x00250000, 0x003A0000, 0x003C0000, 0x003E0000,
                    0x00400000, 0x00420000, 0x00440000, 0x00460000, 0x00480000, 0x004A0000, 0x004C0000, 0x004E0000, 0x007C0000, 0x00800000, 0x00840000, 0x00880000, 0x008C0000, 0x00900000, 0x00940000, 0x00980000,
                    0x009C0000, 0x00F00000, 0x00F80000, 0x01000000, 0x01080000, 0x01100000, 0x01180000, 0x01200000, 0x01280000, 0x01300000, 0x01380000, 0x01F00000, 0x02000000, 0x02100000, 0x02200000, 0x02300000,
                    0x02400000, 0x02500000, 0x02600000, 0x02700000, 0x04200000, 0x04400000, 0x04600000, 0x04800000, 0x04A00000, 0x04C00000, 0x04E00000, 0x05000000, 0x05200000, 0x05400000, 0x05600000, 0x05800000,
                    0x05A00000, 0x08800000, 0x08C00000, 0x09000000, 0x09400000, 0x09800000, 0x09C00000, 0x0A000000, 0x0A400000, 0x0A800000, 0x0AC00000, 0x0B000000, 0x0B400000, 0x0F800000, 0x10000000, 0x10800000,
                    0x11000000, 0x11800000, 0x12000000, 0x12800000, 0x17000000, 0x18000000, 0x19000000, 0x1A000000, 0x1B000000, 0x22000000, 0x24000000, 0x26000000, 0x2C000000, 0x38000000, 0x80000000, 0xA0000000,
                };
                constexpr static const unsigned int add_shifted_rg[256] = {
                    0xC0000000, 0x20000000, 0x40000000, 0x10000000, 0x08000000, 0x04000000, 0x02000000, 0x01800000, 0x01000000, 0x01200000, 0x00900000, 0x00A00000, 0x00B00000, 0x00500000, 0x00580000, 0x00600000,
                    0x00680000, 0x002C0000, 0x00300000, 0x00340000, 0x00380000, 0x003C0000, 0x001A0000, 0x001C0000, 0x001E0000, 0x00200000, 0x00220000, 0x00240000, 0x000E0000, 0x000F0000, 0x00100000, 0x00110000,
                    0x00120000, 0x00078000, 0x00080000, 0x00088000, 0x00090000, 0x00098000, 0x000A0000, 0x0003C000, 0x00040000, 0x00044000, 0x00048000, 0x0004C000, 0x0001E000, 0x00020000, 0x00022000, 0x00024000,
                    0x00026000, 0x00028000, 0x0000B000, 0x0000C000, 0x0000D000, 0x0000E000, 0x00007000, 0x0000F000, 0x00007800, 0x00004C00, 0x00005000, 0x00005400, 0x00003C00, 0x00005800, 0x00005C00, 0x00006000,
                    0x00003E00, 0x00004000, 0x00002D00, 0x00002E00, 0x00004200, 0x00000000, 0x00002F00, 0x00003000, 0x00004400, 0x00003100, 0x00000080, 0x00004600, 0x00003200, 0x00003300, 0x00000100, 0x00003400,
                    0x00000180, 0x00003500, 0x00003600, 0x00000200, 0x00000280, 0x00000300, 0x00000380, 0x00003700, 0x00000400, 0x00000480, 0x00003800, 0x00000500, 0x00000580, 0x00000600, 0x00003900, 0x00000680,
                    0x00000700, 0x00000780, 0x00000800, 0x00000880, 0x00000900, 0x00000980, 0x00000A00, 0x00000A80, 0x00000B00, 0x00000B80, 0x00000C00, 0x00000C80, 0x00000D00, 0x00000D80, 0x00000E00, 0x00000E80,
                    0x00000F00, 0x00000F80, 0x00001000, 0x00001080, 0x00001100, 0x00001180, 0x00001200, 0x00001280, 0x00001300, 0x00001380, 0x00001400, 0x00001480, 0x00001500, 0x00001580, 0x00001600, 0x00001680,
                    0x00001700, 0x00001780, 0x00001800, 0x00001880, 0x00001900, 0x00001980, 0x00001A00, 0x00001A80, 0x00001B00, 0x00001B80, 0x00001C00, 0x00001C80, 0x00001D00, 0x00001D80, 0x00001E00, 0x00001E80,
                    0x00001F00, 0x00001F80, 0x00002000, 0x00002080, 0x00002100, 0x00002180, 0x00002200, 0x00002280, 0x00002300, 0x00002380, 0x00002400, 0x00002480, 0x00002500, 0x00002580, 0x00002600, 0x00002680,
                    0x00002700, 0x00002780, 0x00002800, 0x00002880, 0x00002900, 0x00002980, 0x00002A00, 0x00002A80, 0x00002B00, 0x00002B80, 0x00002C00, 0x00002C80, 0x00003A00, 0x00003B00, 0x00004800, 0x00004A00,
                    0x00006400, 0x00006800, 0x00008000, 0x00006C00, 0x00008800, 0x00009000, 0x00010000, 0x00009800, 0x0000A000, 0x00011000, 0x00012000, 0x00013000, 0x00014000, 0x0000A800, 0x00015000, 0x00016000,
                    0x00017000, 0x00018000, 0x00019000, 0x0001A000, 0x0001B000, 0x0001C000, 0x0001D000, 0x0002A000, 0x0002C000, 0x0002E000, 0x00030000, 0x00032000, 0x00034000, 0x00050000, 0x00036000, 0x00038000,
                    0x0003A000, 0x00054000, 0x00058000, 0x0005C000, 0x00060000, 0x00064000, 0x00068000, 0x0006C000, 0x00070000, 0x00074000, 0x000A8000, 0x000B0000, 0x000B8000, 0x000C0000, 0x000C8000, 0x000D0000,
                    0x000D8000, 0x00130000, 0x00140000, 0x00150000, 0x00160000, 0x00170000, 0x00180000, 0x00190000, 0x00260000, 0x00280000, 0x002A0000, 0x00400000, 0x00440000, 0x00480000, 0x004C0000, 0x00700000,
                    0x00780000, 0x00800000, 0x00880000, 0x00C00000, 0x00D00000, 0x00E00000, 0x00F00000, 0x01400000, 0x01600000, 0x01C00000, 0x03000000, 0x06000000, 0x0C000000, 0x60000000, 0x80000000, 0xA0000000,
                };
            };
        };

        class yuv final {
        public:
            class classic final {
            public:
                constexpr static const unsigned char shift_y[256] = {
                    0x02, 0x04, 0x03, 0x05, 0x05, 0x07, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
                    0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D,
                    0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
                    0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0F,
                    0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
                    0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x06, 0x06, 0x05, 0x05, 0x04, 0x04,
                };
                constexpr static const unsigned char shift_u[256] = {
                    0x02, 0x02, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0B, 0x0B, 0x0C, 0x0C, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12,
                    0x13, 0x13, 0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x17, 0x17, 0x18, 0x19, 0x18, 0x18, 0x19, 0x19, 0x18, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x18, 0x1A, 0x19, 0x1A, 0x19, 0x18, 0x18, 0x18, 0x18, 0x18, 0x17, 0x17, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x15,
                    0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x14, 0x14, 0x14, 0x13, 0x13, 0x12, 0x12, 0x11, 0x10, 0x10, 0x0F, 0x0F, 0x0E, 0x0E, 0x0D, 0x0D, 0x0C, 0x0B, 0x0B, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x02,
                };
                constexpr static const unsigned char shift_v[256] = {
                    0x02, 0x02, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0B, 0x0B, 0x0C, 0x0C, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12,
                    0x13, 0x13, 0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x16, 0x17, 0x17, 0x17, 0x17, 0x17, 0x18, 0x19, 0x18, 0x18, 0x19, 0x19, 0x18, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x19, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x18, 0x1A, 0x19, 0x1A, 0x19, 0x18, 0x18, 0x18, 0x18, 0x18, 0x17, 0x17, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x15,
                    0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x14, 0x14, 0x14, 0x13, 0x13, 0x12, 0x12, 0x11, 0x10, 0x10, 0x0F, 0x0F, 0x0E, 0x0E, 0x0D, 0x0D, 0x0C, 0x0B, 0x0B, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x02,
                };

                constexpr static const unsigned int add_shifted_y[256] = {
                    0xC0000000, 0x90000000, 0xA0000000, 0x60000000, 0x50000000, 0x46000000, 0x40000000, 0x3A000000, 0x36000000, 0x32000000, 0x30000000, 0x2D000000, 0x2C000000, 0x29000000, 0x27000000, 0x25000000,
                    0x24800000, 0x23000000, 0x22000000, 0x20800000, 0x20000000, 0x1E800000, 0x1D000000, 0x1C000000, 0x1A800000, 0x19000000, 0x18800000, 0x17000000, 0x16000000, 0x14800000, 0x13000000, 0x12000000,
                    0x11000000, 0x10400000, 0x0FC00000, 0x0F400000, 0x0E800000, 0x0DC00000, 0x0D400000, 0x0CC00000, 0x0C000000, 0x0B800000, 0x0B400000, 0x0AC00000, 0x0A400000, 0x09C00000, 0x09800000, 0x09000000,
                    0x08C00000, 0x08400000, 0x08000000, 0x07800000, 0x07400000, 0x06C00000, 0x06800000, 0x06400000, 0x06000000, 0x05E00000, 0x05C00000, 0x05800000, 0x05600000, 0x05200000, 0x05000000, 0x04E00000,
                    0x04A00000, 0x04800000, 0x04600000, 0x04400000, 0x04000000, 0x03E00000, 0x03C00000, 0x03800000, 0x03600000, 0x03400000, 0x03000000, 0x02E00000, 0x02C00000, 0x02800000, 0x02600000, 0x02500000,
                    0x02300000, 0x02200000, 0x02100000, 0x01F00000, 0x01E00000, 0x01D00000, 0x01B00000, 0x01A00000, 0x01800000, 0x01700000, 0x01500000, 0x01400000, 0x01200000, 0x01100000, 0x00F00000, 0x00E80000,
                    0x00D80000, 0x00D00000, 0x00C00000, 0x00B00000, 0x00A80000, 0x00980000, 0x00880000, 0x00800000, 0x00700000, 0x00680000, 0x00640000, 0x005C0000, 0x00540000, 0x004C0000, 0x00480000, 0x00400000,
                    0x003C0000, 0x00360000, 0x00320000, 0x002E0000, 0x002A0000, 0x00260000, 0x00220000, 0x00200000, 0x001C0000, 0x001A0000, 0x00190000, 0x00170000, 0x00150000, 0x00120000, 0x00110000, 0x000E0000,
                    0x000C0000, 0x00088000, 0x00098000, 0x00068000, 0x00020000, 0x00048000, 0x00010000, 0x00058000, 0x00008000, 0x00038000, 0x00040000, 0x00000000, 0x00080000, 0x00018000, 0x00070000, 0x00030000,
                    0x00060000, 0x00050000, 0x00028000, 0x00078000, 0x00090000, 0x000B0000, 0x000A0000, 0x000D0000, 0x000F0000, 0x00100000, 0x00130000, 0x00140000, 0x00160000, 0x00180000, 0x001B0000, 0x001E0000,
                    0x00240000, 0x00280000, 0x002C0000, 0x00300000, 0x00340000, 0x00380000, 0x00440000, 0x00500000, 0x00580000, 0x00600000, 0x006C0000, 0x00780000, 0x00900000, 0x00A00000, 0x00B80000, 0x00C80000,
                    0x00E00000, 0x01000000, 0x01300000, 0x01600000, 0x01900000, 0x01C00000, 0x02000000, 0x02400000, 0x02A00000, 0x03200000, 0x03A00000, 0x04200000, 0x04C00000, 0x05400000, 0x05A00000, 0x06200000,
                    0x07000000, 0x07C00000, 0x08800000, 0x09400000, 0x0A000000, 0x0A800000, 0x0B000000, 0x0BC00000, 0x0C400000, 0x0C800000, 0x0D000000, 0x0D800000, 0x0E000000, 0x0E400000, 0x0EC00000, 0x0F000000,
                    0x0F800000, 0x10000000, 0x10800000, 0x10C00000, 0x11400000, 0x11800000, 0x12800000, 0x13800000, 0x14000000, 0x15000000, 0x15800000, 0x16800000, 0x17800000, 0x18000000, 0x19800000, 0x1A000000,
                    0x1B000000, 0x1B800000, 0x1C800000, 0x1D800000, 0x1E000000, 0x1F000000, 0x1F800000, 0x21000000, 0x21800000, 0x22800000, 0x23800000, 0x24000000, 0x26000000, 0x28000000, 0x2A000000, 0x2B000000,
                    0x2E000000, 0x2F000000, 0x31000000, 0x33000000, 0x34000000, 0x38000000, 0x3C000000, 0x3E000000, 0x42000000, 0x44000000, 0x48000000, 0x4C000000, 0x58000000, 0x68000000, 0x70000000, 0x80000000,
                };
                constexpr static const unsigned int add_shifted_u[256] = {
                    0xC0000000, 0x40000000, 0x20000000, 0x10000000, 0x08000000, 0x04000000, 0x03000000, 0x01800000, 0x00E00000, 0x00A00000, 0x00700000, 0x00500000, 0x00400000, 0x00300000, 0x002C0000, 0x00240000,
                    0x001C0000, 0x001A0000, 0x00160000, 0x00140000, 0x00120000, 0x00100000, 0x000E0000, 0x000A0000, 0x00090000, 0x00070000, 0x00060000, 0x00040000, 0x00038000, 0x00028000, 0x00020000, 0x0001C000,
                    0x00016000, 0x00010000, 0x0000D000, 0x0000B000, 0x00009800, 0x00007800, 0x00005800, 0x00005C00, 0x00005000, 0x00004200, 0x00004000, 0x00003800, 0x00003600, 0x00003A00, 0x00003300, 0x00002680,
                    0x00002B00, 0x00002D00, 0x00002600, 0x00002880, 0x00002E00, 0x00002900, 0x00002580, 0x00000DC0, 0x00000E00, 0x00002400, 0x00000E80, 0x00002800, 0x00000F00, 0x00002500, 0x000024C0, 0x00000FC0,
                    0x000023C0, 0x00001040, 0x00001080, 0x000010C0, 0x00001100, 0x00001140, 0x00001180, 0x000011C0, 0x00001200, 0x00001240, 0x00001280, 0x000012C0, 0x00001300, 0x00001340, 0x00001380, 0x000013C0,
                    0x00001400, 0x00001440, 0x00001480, 0x000014C0, 0x00001500, 0x00001540, 0x00001580, 0x000015C0, 0x00001600, 0x00001640, 0x00001680, 0x000016C0, 0x000006C0, 0x00000780, 0x00000540, 0x00000580,
                    0x00000440, 0x00000380, 0x00000140, 0x00000180, 0x00001900, 0x00000D80, 0x00000BC0, 0x00000C80, 0x00000CC0, 0x00000D40, 0x00001A80, 0x00001AC0, 0x00001B00, 0x00001B40, 0x00001B80, 0x00001BC0,
                    0x00001C00, 0x00001C40, 0x00001C80, 0x00001CC0, 0x00000100, 0x00001D40, 0x00001D80, 0x00001700, 0x00001780, 0x00001E40, 0x00001E80, 0x000000C0, 0x00001F00, 0x000019C0, 0x00000080, 0x00000040,
                    0x00000000, 0x00002040, 0x00002080, 0x000020C0, 0x00001E00, 0x00001DC0, 0x00001F80, 0x00001F40, 0x00002200, 0x00002240, 0x00002280, 0x000022C0, 0x00002300, 0x00002340, 0x00002380, 0x00002180,
                    0x000021C0, 0x00002100, 0x00002140, 0x00001A00, 0x00001000, 0x00001940, 0x00000F80, 0x00000E40, 0x00001980, 0x000017C0, 0x00001740, 0x00000EC0, 0x00000F40, 0x00000700, 0x00001840, 0x00001800,
                    0x00000D00, 0x00000C40, 0x00000C00, 0x00000740, 0x00000800, 0x00000640, 0x00000600, 0x00000B80, 0x000005C0, 0x00001880, 0x00000B40, 0x00000B00, 0x00000AC0, 0x00000500, 0x00000A80, 0x00000A40,
                    0x000004C0, 0x00000480, 0x000018C0, 0x00000A00, 0x000003C0, 0x000009C0, 0x00000980, 0x00000400, 0x00000340, 0x00000300, 0x000002C0, 0x00000940, 0x00000280, 0x00000240, 0x00000200, 0x00000900,
                    0x000001C0, 0x00002000, 0x00001FC0, 0x00001A40, 0x00001EC0, 0x00001D00, 0x000008C0, 0x00000880, 0x00000840, 0x00002440, 0x000007C0, 0x00002780, 0x00002A00, 0x00002480, 0x00002700, 0x00000680,
                    0x00002980, 0x00003000, 0x00003100, 0x00003200, 0x00002C00, 0x00002F00, 0x00003400, 0x00003E00, 0x00003C00, 0x00004800, 0x00004400, 0x00004C00, 0x00005400, 0x00006000, 0x00006400, 0x00006800,
                    0x00007000, 0x00008000, 0x00008800, 0x00009000, 0x0000A000, 0x0000A800, 0x0000C000, 0x0000E000, 0x0000F000, 0x00012000, 0x00014000, 0x00018000, 0x00024000, 0x00030000, 0x00050000, 0x00080000,
                    0x000C0000, 0x00180000, 0x00200000, 0x00280000, 0x00380000, 0x00480000, 0x00600000, 0x00800000, 0x00C00000, 0x01000000, 0x02000000, 0x06000000, 0x0C000000, 0x18000000, 0x30000000, 0x80000000,
                };
                constexpr static const unsigned int add_shifted_v[256] = {
                    0xC0000000, 0x40000000, 0x20000000, 0x10000000, 0x08000000, 0x04000000, 0x03000000, 0x01800000, 0x00E00000, 0x00A00000, 0x00700000, 0x00500000, 0x00400000, 0x00300000, 0x002C0000, 0x00240000,
                    0x001C0000, 0x001A0000, 0x00160000, 0x00140000, 0x00120000, 0x00100000, 0x000E0000, 0x000A0000, 0x00090000, 0x00070000, 0x00060000, 0x00040000, 0x00038000, 0x00028000, 0x00020000, 0x0001C000,
                    0x00016000, 0x00010000, 0x0000D000, 0x0000B000, 0x00009800, 0x00007800, 0x00005800, 0x00005C00, 0x00005000, 0x00004200, 0x00004000, 0x00003800, 0x00003600, 0x00003A00, 0x00003300, 0x00002680,
                    0x00002B00, 0x00002D00, 0x00002600, 0x00002880, 0x00002E00, 0x00002900, 0x00002580, 0x00000DC0, 0x00000E00, 0x00002400, 0x00000E80, 0x00002800, 0x00000F00, 0x00002500, 0x000024C0, 0x00000FC0,
                    0x000023C0, 0x00001040, 0x00001080, 0x000010C0, 0x00001100, 0x00001140, 0x00001180, 0x000011C0, 0x00001200, 0x00001240, 0x00001280, 0x000012C0, 0x00001300, 0x00001340, 0x00001380, 0x000013C0,
                    0x00001400, 0x00001440, 0x00001480, 0x000014C0, 0x00001500, 0x00001540, 0x00001580, 0x000015C0, 0x00001600, 0x00001640, 0x00001680, 0x000016C0, 0x000006C0, 0x00000780, 0x00000540, 0x00000580,
                    0x00000440, 0x00000380, 0x00000140, 0x00000180, 0x00001900, 0x00000D80, 0x00000BC0, 0x00000C80, 0x00000CC0, 0x00000D40, 0x00001A80, 0x00001AC0, 0x00001B00, 0x00001B40, 0x00001B80, 0x00001BC0,
                    0x00001C00, 0x00001C40, 0x00001C80, 0x00001CC0, 0x00000100, 0x00001D40, 0x00001D80, 0x00001700, 0x00001780, 0x00001E40, 0x00001E80, 0x000000C0, 0x00001F00, 0x000019C0, 0x00000080, 0x00000040,
                    0x00000000, 0x00002040, 0x00002080, 0x000020C0, 0x00001E00, 0x00001DC0, 0x00001F80, 0x00001F40, 0x00002200, 0x00002240, 0x00002280, 0x000022C0, 0x00002300, 0x00002340, 0x00002380, 0x00002180,
                    0x000021C0, 0x00002100, 0x00002140, 0x00001A00, 0x00001000, 0x00001940, 0x00000F80, 0x00000E40, 0x00001980, 0x000017C0, 0x00001740, 0x00000EC0, 0x00000F40, 0x00000700, 0x00001840, 0x00001800,
                    0x00000D00, 0x00000C40, 0x00000C00, 0x00000740, 0x00000800, 0x00000640, 0x00000600, 0x00000B80, 0x000005C0, 0x00001880, 0x00000B40, 0x00000B00, 0x00000AC0, 0x00000500, 0x00000A80, 0x00000A40,
                    0x000004C0, 0x00000480, 0x000018C0, 0x00000A00, 0x000003C0, 0x000009C0, 0x00000980, 0x00000400, 0x00000340, 0x00000300, 0x000002C0, 0x00000940, 0x00000280, 0x00000240, 0x00000200, 0x00000900,
                    0x000001C0, 0x00002000, 0x00001FC0, 0x00001A40, 0x00001EC0, 0x00001D00, 0x000008C0, 0x00000880, 0x00000840, 0x00002440, 0x000007C0, 0x00002780, 0x00002A00, 0x00002480, 0x00002700, 0x00000680,
                    0x00002980, 0x00003000, 0x00003100, 0x00003200, 0x00002C00, 0x00002F00, 0x00003400, 0x00003E00, 0x00003C00, 0x00004800, 0x00004400, 0x00004C00, 0x00005400, 0x00006000, 0x00006400, 0x00006800,
                    0x00007000, 0x00008000, 0x00008800, 0x00009000, 0x0000A000, 0x0000A800, 0x0000C000, 0x0000E000, 0x0000F000, 0x00012000, 0x00014000, 0x00018000, 0x00024000, 0x00030000, 0x00050000, 0x00080000,
                    0x000C0000, 0x00180000, 0x00200000, 0x00280000, 0x00380000, 0x00480000, 0x00600000, 0x00800000, 0x00C00000, 0x01000000, 0x02000000, 0x06000000, 0x0C000000, 0x18000000, 0x30000000, 0x80000000,
                };
            };

            class left final {
            public:
                constexpr static const unsigned char shift_y[256] = {
                    0x02, 0x02, 0x04, 0x05, 0x06, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B,
                    0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
                    0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E,
                    0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11,
                    0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0F, 0x0E, 0x0E, 0x0E,
                    0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C,
                    0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x06, 0x05, 0x04, 0x03,
                };
                constexpr static const unsigned char shift_u[256] = {
                    0x02, 0x02, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0B, 0x0C, 0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x12, 0x13, 0x13, 0x14, 0x15, 0x15, 0x15, 0x15,
                    0x16, 0x16, 0x17, 0x17, 0x19, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x1A, 0x19, 0x17, 0x17, 0x16, 0x17, 0x16, 0x16, 0x16, 0x16, 0x15, 0x16, 0x15, 0x15, 0x15, 0x15,
                    0x14, 0x14, 0x14, 0x13, 0x13, 0x13, 0x12, 0x12, 0x12, 0x11, 0x11, 0x10, 0x10, 0x10, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x0A, 0x08, 0x07, 0x06, 0x05, 0x04, 0x02,
                };
                constexpr static const unsigned char shift_v[256] = {
                    0x02, 0x02, 0x04, 0x05, 0x07, 0x07, 0x08, 0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 0x0C, 0x0C, 0x0D, 0x0D, 0x0E, 0x0E, 0x0F, 0x0F, 0x10, 0x10, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x12, 0x12, 0x11,
                    0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x14, 0x15, 0x17, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x19, 0x19, 0x1A, 0x1A, 0x18,
                    0x19, 0x18, 0x17, 0x17, 0x17, 0x16, 0x16, 0x15, 0x14, 0x13, 0x14, 0x13, 0x11, 0x10, 0x0F, 0x0E, 0x0D, 0x0D, 0x0C, 0x0C, 0x0B, 0x0B, 0x0A, 0x0A, 0x09, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x02,
                };

                constexpr static const unsigned int add_shifted_y[256] = {
                    0x80000000, 0xC0000000, 0x40000000, 0x30000000, 0x28000000, 0x20000000, 0x22000000, 0x16000000, 0x17000000, 0x18000000, 0x19000000, 0x0F000000, 0x0F800000, 0x10000000, 0x10800000, 0x11000000,
                    0x11800000, 0x12000000, 0x09000000, 0x09400000, 0x09800000, 0x09C00000, 0x0A000000, 0x0A400000, 0x0A800000, 0x0AC00000, 0x0B000000, 0x0B400000, 0x0B800000, 0x0BC00000, 0x04A00000, 0x04C00000,
                    0x04E00000, 0x05000000, 0x05200000, 0x05400000, 0x05600000, 0x05800000, 0x05A00000, 0x05C00000, 0x05E00000, 0x06000000, 0x06200000, 0x06400000, 0x06600000, 0x06800000, 0x06A00000, 0x06C00000,
                    0x01F00000, 0x02000000, 0x02100000, 0x02200000, 0x02300000, 0x02400000, 0x02500000, 0x02600000, 0x02700000, 0x02800000, 0x02900000, 0x02A00000, 0x02B00000, 0x02C00000, 0x02D00000, 0x02E00000,
                    0x02F00000, 0x03000000, 0x03100000, 0x03200000, 0x03300000, 0x00C00000, 0x00C80000, 0x00D00000, 0x00D80000, 0x00E00000, 0x00E80000, 0x00F00000, 0x00F80000, 0x01000000, 0x01080000, 0x01100000,
                    0x01180000, 0x01200000, 0x01280000, 0x01300000, 0x01380000, 0x01400000, 0x01480000, 0x01500000, 0x01580000, 0x01600000, 0x00480000, 0x004C0000, 0x00500000, 0x00540000, 0x00580000, 0x005C0000,
                    0x00600000, 0x00640000, 0x00680000, 0x006C0000, 0x00700000, 0x00740000, 0x00780000, 0x007C0000, 0x00800000, 0x00840000, 0x00880000, 0x00120000, 0x00140000, 0x00160000, 0x00180000, 0x001A0000,
                    0x001C0000, 0x001E0000, 0x00200000, 0x00220000, 0x00240000, 0x00260000, 0x00280000, 0x002A0000, 0x00040000, 0x00050000, 0x00060000, 0x00070000, 0x00080000, 0x00090000, 0x00000000, 0x00008000,
                    0x00010000, 0x00018000, 0x00020000, 0x00028000, 0x00030000, 0x00038000, 0x000A0000, 0x000B0000, 0x000C0000, 0x000D0000, 0x000E0000, 0x000F0000, 0x00100000, 0x00110000, 0x002C0000, 0x002E0000,
                    0x00300000, 0x00320000, 0x00340000, 0x00360000, 0x00380000, 0x003A0000, 0x003C0000, 0x003E0000, 0x00400000, 0x00420000, 0x00440000, 0x008C0000, 0x00460000, 0x00900000, 0x00940000, 0x00980000,
                    0x009C0000, 0x00A00000, 0x00A40000, 0x00A80000, 0x00AC0000, 0x00B00000, 0x00B40000, 0x00B80000, 0x00BC0000, 0x01680000, 0x01700000, 0x01780000, 0x01800000, 0x01880000, 0x01900000, 0x01980000,
                    0x01A00000, 0x01A80000, 0x01B00000, 0x01B80000, 0x01C00000, 0x01C80000, 0x01D00000, 0x01D80000, 0x01E00000, 0x01E80000, 0x03400000, 0x03500000, 0x03600000, 0x03700000, 0x03800000, 0x03900000,
                    0x03A00000, 0x03B00000, 0x03C00000, 0x03D00000, 0x03E00000, 0x03F00000, 0x04000000, 0x04100000, 0x04200000, 0x04300000, 0x04400000, 0x04500000, 0x04600000, 0x04700000, 0x04800000, 0x04900000,
                    0x06E00000, 0x07000000, 0x07200000, 0x07400000, 0x07600000, 0x07800000, 0x07A00000, 0x07C00000, 0x07E00000, 0x08000000, 0x08200000, 0x08400000, 0x08600000, 0x08800000, 0x08A00000, 0x08C00000,
                    0x08E00000, 0x0C000000, 0x0C400000, 0x0C800000, 0x0CC00000, 0x0D000000, 0x0D400000, 0x0D800000, 0x0DC00000, 0x0E000000, 0x0E400000, 0x0E800000, 0x0EC00000, 0x12800000, 0x13000000, 0x13800000,
                    0x14000000, 0x14800000, 0x15000000, 0x15800000, 0x1A000000, 0x1B000000, 0x1C000000, 0x1D000000, 0x1E000000, 0x1F000000, 0x24000000, 0x26000000, 0x2C000000, 0x38000000, 0x50000000, 0x60000000,
                };
                constexpr static const unsigned int add_shifted_u[256] = {
                    0x40000000, 0x80000000, 0x20000000, 0x10000000, 0x08000000, 0x04000000, 0x02000000, 0x01800000, 0x00C00000, 0x00600000, 0x00800000, 0x00400000, 0x00280000, 0x00300000, 0x00180000, 0x001C0000,
                    0x000A0000, 0x000C0000, 0x00050000, 0x00060000, 0x00030000, 0x00038000, 0x00018000, 0x0001C000, 0x00020000, 0x0000E000, 0x00010000, 0x0000A000, 0x00005800, 0x00006000, 0x00006800, 0x00007000,
                    0x00003800, 0x00003C00, 0x00002E00, 0x00003000, 0x00002900, 0x00002980, 0x00002A00, 0x00002A80, 0x00002B00, 0x00000000, 0x00002B80, 0x00002C00, 0x00000040, 0x00000080, 0x000000C0, 0x00000100,
                    0x00000140, 0x00000180, 0x000001C0, 0x00000200, 0x00000240, 0x00000280, 0x000002C0, 0x00000300, 0x00000340, 0x00000380, 0x000003C0, 0x00000400, 0x00000440, 0x00000480, 0x000004C0, 0x00000500,
                    0x00000540, 0x00000580, 0x000005C0, 0x00000600, 0x00000640, 0x00000680, 0x000006C0, 0x00000700, 0x00000740, 0x00000780, 0x000007C0, 0x00000800, 0x00000840, 0x00000880, 0x000008C0, 0x00000900,
                    0x00000940, 0x00000980, 0x000009C0, 0x00000A00, 0x00000A40, 0x00000A80, 0x00000AC0, 0x00000B00, 0x00000B40, 0x00000B80, 0x00000BC0, 0x00000C00, 0x00000C40, 0x00000C80, 0x00000CC0, 0x00000D00,
                    0x00000D40, 0x00000D80, 0x00000DC0, 0x00000E00, 0x00000E40, 0x00000E80, 0x00000EC0, 0x00000F00, 0x00000F40, 0x00000F80, 0x00000FC0, 0x00001000, 0x00001040, 0x00001080, 0x000010C0, 0x00001100,
                    0x00001140, 0x00001180, 0x000011C0, 0x00001200, 0x00001240, 0x00001280, 0x000012C0, 0x00001300, 0x00001340, 0x00001380, 0x000013C0, 0x00001400, 0x00001440, 0x00001480, 0x000014C0, 0x00001500,
                    0x00001540, 0x00001580, 0x000015C0, 0x00001600, 0x00001640, 0x00001680, 0x000016C0, 0x00001700, 0x00001740, 0x00001780, 0x000017C0, 0x00001800, 0x00001840, 0x00001880, 0x000018C0, 0x00001900,
                    0x00001940, 0x00001980, 0x000019C0, 0x00001A00, 0x00001A40, 0x00001A80, 0x00001AC0, 0x00001B00, 0x00001B40, 0x00001B80, 0x00001BC0, 0x00001C00, 0x00001C40, 0x00001C80, 0x00001CC0, 0x00001D00,
                    0x00001D40, 0x00001D80, 0x00001DC0, 0x00001E00, 0x00001E40, 0x00001E80, 0x00001EC0, 0x00001F00, 0x00001F40, 0x00001F80, 0x00001FC0, 0x00002000, 0x00002040, 0x00002080, 0x000020C0, 0x00002100,
                    0x00002140, 0x00002180, 0x000021C0, 0x00002200, 0x00002240, 0x00002280, 0x000022C0, 0x00002300, 0x00002340, 0x00002380, 0x000023C0, 0x00002400, 0x00002440, 0x00002480, 0x000024C0, 0x00002500,
                    0x00002540, 0x00002580, 0x000025C0, 0x00002600, 0x00002640, 0x00002680, 0x000026C0, 0x00002700, 0x00002740, 0x00002780, 0x00002C80, 0x000027C0, 0x00002800, 0x00002840, 0x00002D00, 0x00002880,
                    0x000028C0, 0x00002D80, 0x00003200, 0x00003400, 0x00004000, 0x00003600, 0x00004400, 0x00004800, 0x00004C00, 0x00005000, 0x00007800, 0x00005400, 0x00008000, 0x00008800, 0x00009000, 0x00009800,
                    0x0000B000, 0x0000C000, 0x0000D000, 0x00012000, 0x00014000, 0x00016000, 0x00024000, 0x00028000, 0x0002C000, 0x00040000, 0x00048000, 0x00070000, 0x00080000, 0x00090000, 0x000E0000, 0x00100000,
                    0x00120000, 0x00140000, 0x00160000, 0x00200000, 0x00240000, 0x00380000, 0x00500000, 0x00A00000, 0x01000000, 0x01400000, 0x03000000, 0x06000000, 0x0C000000, 0x18000000, 0x30000000, 0xC0000000,
                };
                constexpr static const unsigned int add_shifted_v[256] = {
                    0x40000000, 0x80000000, 0x20000000, 0x10000000, 0x06000000, 0x08000000, 0x04000000, 0x02000000, 0x02800000, 0x01000000, 0x01400000, 0x00800000, 0x00A00000, 0x00400000, 0x00500000, 0x00200000,
                    0x00280000, 0x00140000, 0x00180000, 0x000E0000, 0x00100000, 0x00060000, 0x00070000, 0x00028000, 0x00030000, 0x00038000, 0x0000C000, 0x00010000, 0x00014000, 0x00018000, 0x0001C000, 0x00040000,
                    0x00080000, 0x00090000, 0x000A0000, 0x000B0000, 0x000C0000, 0x00048000, 0x00050000, 0x00020000, 0x00024000, 0x00005000, 0x00004000, 0x00003000, 0x00000000, 0x00000040, 0x00000080, 0x000000C0,
                    0x00000100, 0x00000140, 0x00000180, 0x000001C0, 0x00000200, 0x00000240, 0x00000280, 0x000002C0, 0x00000300, 0x00000340, 0x00000380, 0x000003C0, 0x00000400, 0x00000440, 0x00000480, 0x000004C0,
                    0x00000500, 0x00000540, 0x00000580, 0x000005C0, 0x00000600, 0x00000640, 0x00000680, 0x000006C0, 0x00000700, 0x00000740, 0x00000780, 0x000007C0, 0x00000800, 0x00000840, 0x00000880, 0x000008C0,
                    0x00000900, 0x00000940, 0x00000980, 0x000009C0, 0x00000A00, 0x00000A40, 0x00000A80, 0x00000AC0, 0x00000B00, 0x00000B40, 0x00000B80, 0x00000BC0, 0x00000C00, 0x00000C40, 0x00000C80, 0x00000CC0,
                    0x00000D00, 0x00000D40, 0x00000D80, 0x00000DC0, 0x00000E00, 0x00000E40, 0x00000E80, 0x00000EC0, 0x00000F00, 0x00000F40, 0x00000F80, 0x00000FC0, 0x00001000, 0x00001040, 0x00001080, 0x000010C0,
                    0x00001100, 0x00001140, 0x00001180, 0x000011C0, 0x00001200, 0x00001240, 0x00001280, 0x000012C0, 0x00001300, 0x00001340, 0x00001380, 0x000013C0, 0x00001400, 0x00001440, 0x00001480, 0x000014C0,
                    0x00001500, 0x00001540, 0x00001580, 0x000015C0, 0x00001600, 0x00001640, 0x00001680, 0x000016C0, 0x00001700, 0x00001740, 0x00001780, 0x000017C0, 0x00001800, 0x00001840, 0x00001880, 0x000018C0,
                    0x00001900, 0x00001940, 0x00001980, 0x000019C0, 0x00001A00, 0x00001A40, 0x00001A80, 0x00001AC0, 0x00001B00, 0x00001B40, 0x00001B80, 0x00001BC0, 0x00001C00, 0x00001C40, 0x00001C80, 0x00001CC0,
                    0x00001D00, 0x00001D40, 0x00001D80, 0x00001DC0, 0x00001E00, 0x00001E40, 0x00001E80, 0x00001EC0, 0x00001F00, 0x00001F40, 0x00001F80, 0x00001FC0, 0x00002000, 0x00002040, 0x00002080, 0x000020C0,
                    0x00002100, 0x00002140, 0x00002180, 0x000021C0, 0x00002200, 0x00002240, 0x00002280, 0x000022C0, 0x00002300, 0x00002340, 0x00002380, 0x000023C0, 0x00002400, 0x00002440, 0x00002480, 0x000024C0,
                    0x00002500, 0x00002540, 0x00002580, 0x000025C0, 0x00002600, 0x00002640, 0x00002680, 0x000026C0, 0x00002700, 0x00002740, 0x00002780, 0x000027C0, 0x00002800, 0x00002840, 0x00002880, 0x000028C0,
                    0x00002900, 0x00002940, 0x00002980, 0x000029C0, 0x00002A00, 0x00002A40, 0x00002A80, 0x00002AC0, 0x00002B00, 0x00002B40, 0x00002C00, 0x00002C80, 0x00002D00, 0x00002B80, 0x00002BC0, 0x00002E00,
                    0x00002D80, 0x00002F00, 0x00003200, 0x00003400, 0x00003600, 0x00003800, 0x00003C00, 0x00004800, 0x00006000, 0x00008000, 0x00007000, 0x0000A000, 0x00058000, 0x000D0000, 0x00120000, 0x001C0000,
                    0x00300000, 0x00380000, 0x00600000, 0x00700000, 0x00C00000, 0x00E00000, 0x01800000, 0x01C00000, 0x03000000, 0x03800000, 0x05000000, 0x0A000000, 0x0C000000, 0x18000000, 0x30000000, 0xC0000000,
                };
            };

            class gradient final {
            public:
                constexpr static const unsigned char shift_y[256] = {
                    0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A,
                    0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E,
                    0x0E, 0x0E, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x12, 0x12, 0x12, 0x12,
                    0x12, 0x12, 0x12, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x13, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x15, 0x15, 0x16, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x16, 0x17,
                    0x17, 0x17, 0x16, 0x17, 0x16, 0x17, 0x17, 0x17, 0x16, 0x16, 0x16, 0x16, 0x16, 0x17, 0x16, 0x15, 0x16, 0x15, 0x15, 0x15, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x13, 0x14, 0x13, 0x13, 0x13,
                    0x13, 0x12, 0x12, 0x12, 0x12, 0x12, 0x11, 0x11, 0x11, 0x11, 0x11, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E,
                    0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x07, 0x06, 0x05, 0x04, 0x02,
                };
                constexpr static const unsigned char shift_u[256] = {
                    0x02, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D, 0x0E, 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x13, 0x13, 0x13, 0x14, 0x14, 0x14, 0x14, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15,
                    0x16, 0x17, 0x17, 0x17, 0x17, 0x1A, 0x18, 0x1A, 0x1A, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x1A, 0x1A, 0x18, 0x19, 0x1A, 0x18, 0x1A, 0x19, 0x1A, 0x19, 0x18, 0x18, 0x18, 0x18, 0x17, 0x16, 0x17, 0x16, 0x16,
                    0x15, 0x15, 0x15, 0x14, 0x15, 0x14, 0x14, 0x14, 0x15, 0x14, 0x15, 0x14, 0x14, 0x14, 0x14, 0x13, 0x13, 0x13, 0x13, 0x12, 0x12, 0x11, 0x10, 0x0F, 0x0F, 0x0D, 0x0C, 0x09, 0x07, 0x05, 0x03, 0x02,
                };
                constexpr static const unsigned char shift_v[256] = {
                    0x02, 0x02, 0x04, 0x06, 0x08, 0x09, 0x0A, 0x0C, 0x0C, 0x0D, 0x0E, 0x0E, 0x0F, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x12, 0x12, 0x13, 0x13, 0x13, 0x14, 0x15, 0x17, 0x16, 0x16, 0x17, 0x16, 0x17,
                    0x16, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
                    0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
                    0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
                    0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
                    0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
                    0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17,
                    0x17, 0x17, 0x16, 0x15, 0x16, 0x15, 0x14, 0x15, 0x13, 0x14, 0x14, 0x13, 0x12, 0x13, 0x12, 0x12, 0x11, 0x10, 0x10, 0x10, 0x0F, 0x0E, 0x0E, 0x0D, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x05, 0x03, 0x02,
                };

                constexpr static const unsigned int add_shifted_y[256] = {
                    0x80000000, 0x60000000, 0x40000000, 0x30000000, 0x28000000, 0x1C000000, 0x1E000000, 0x20000000, 0x12000000, 0x13000000, 0x14000000, 0x15000000, 0x16000000, 0x0A000000, 0x0A800000, 0x0B000000,
                    0x0B800000, 0x0C000000, 0x0C800000, 0x0D000000, 0x0D800000, 0x04800000, 0x04C00000, 0x05000000, 0x05400000, 0x05800000, 0x05C00000, 0x06000000, 0x06400000, 0x06800000, 0x06C00000, 0x07000000,
                    0x02200000, 0x02400000, 0x02600000, 0x02800000, 0x02A00000, 0x02C00000, 0x02E00000, 0x03000000, 0x03200000, 0x03400000, 0x01100000, 0x01200000, 0x01300000, 0x01400000, 0x01500000, 0x01600000,
                    0x01700000, 0x01800000, 0x00900000, 0x00980000, 0x00A00000, 0x00A80000, 0x00B00000, 0x00B80000, 0x00C00000, 0x00440000, 0x00480000, 0x004C0000, 0x00500000, 0x00540000, 0x00580000, 0x005C0000,
                    0x00600000, 0x00640000, 0x001C0000, 0x001E0000, 0x00200000, 0x00220000, 0x00240000, 0x00260000, 0x00280000, 0x002A0000, 0x002C0000, 0x002E0000, 0x00300000, 0x000C0000, 0x000D0000, 0x000E0000,
                    0x000F0000, 0x00100000, 0x00110000, 0x00120000, 0x00130000, 0x00060000, 0x00068000, 0x00070000, 0x00078000, 0x00080000, 0x00088000, 0x00090000, 0x00030000, 0x00034000, 0x00038000, 0x0003C000,
                    0x00040000, 0x00044000, 0x00048000, 0x00016000, 0x00018000, 0x0001A000, 0x0001C000, 0x0001E000, 0x00020000, 0x00022000, 0x00024000, 0x00008000, 0x00009000, 0x0000A000, 0x0000B000, 0x0000C000,
                    0x0000D000, 0x00005000, 0x00005800, 0x00002400, 0x00000000, 0x00000200, 0x00000400, 0x00000600, 0x00000800, 0x00000A00, 0x00000C00, 0x00000E00, 0x00001000, 0x00001200, 0x00002800, 0x00001400,
                    0x00001600, 0x00001800, 0x00002C00, 0x00001A00, 0x00003000, 0x00001C00, 0x00001E00, 0x00002000, 0x00003400, 0x00003800, 0x00003C00, 0x00004000, 0x00004400, 0x00002200, 0x00004800, 0x00006000,
                    0x00004C00, 0x00006800, 0x00007000, 0x00007800, 0x0000E000, 0x0000F000, 0x00010000, 0x00011000, 0x00012000, 0x00013000, 0x00014000, 0x00026000, 0x00015000, 0x00028000, 0x0002A000, 0x0002C000,
                    0x0002E000, 0x0004C000, 0x00050000, 0x00054000, 0x00058000, 0x0005C000, 0x00098000, 0x000A0000, 0x000A8000, 0x000B0000, 0x000B8000, 0x00140000, 0x00150000, 0x00160000, 0x00170000, 0x00180000,
                    0x00190000, 0x001A0000, 0x001B0000, 0x00320000, 0x00340000, 0x00360000, 0x00380000, 0x003A0000, 0x003C0000, 0x003E0000, 0x00400000, 0x00420000, 0x00680000, 0x006C0000, 0x00700000, 0x00740000,
                    0x00780000, 0x007C0000, 0x00800000, 0x00840000, 0x00880000, 0x008C0000, 0x00C80000, 0x00D00000, 0x00D80000, 0x00E00000, 0x00E80000, 0x00F00000, 0x00F80000, 0x01000000, 0x01080000, 0x01900000,
                    0x01A00000, 0x01B00000, 0x01C00000, 0x01D00000, 0x01E00000, 0x01F00000, 0x02000000, 0x02100000, 0x03600000, 0x03800000, 0x03A00000, 0x03C00000, 0x03E00000, 0x04000000, 0x04200000, 0x04400000,
                    0x04600000, 0x07400000, 0x07800000, 0x07C00000, 0x08000000, 0x08400000, 0x08800000, 0x08C00000, 0x09000000, 0x09400000, 0x09800000, 0x09C00000, 0x0E000000, 0x0E800000, 0x0F000000, 0x0F800000,
                    0x10000000, 0x10800000, 0x11000000, 0x11800000, 0x17000000, 0x18000000, 0x19000000, 0x1A000000, 0x1B000000, 0x22000000, 0x24000000, 0x26000000, 0x2C000000, 0x38000000, 0x50000000, 0xC0000000,
                };
                constexpr static const unsigned int add_shifted_u[256] = {
                    0x40000000, 0x80000000, 0x10000000, 0x04000000, 0x01000000, 0x00400000, 0x00200000, 0x00100000, 0x000C0000, 0x00050000, 0x00060000, 0x00038000, 0x00040000, 0x00028000, 0x0002C000, 0x0001A000,
                    0x0001C000, 0x0001E000, 0x0000D000, 0x0000E000, 0x0000F000, 0x00010000, 0x00005000, 0x00005800, 0x00006000, 0x00006800, 0x00007000, 0x00007800, 0x00008000, 0x00008800, 0x00009000, 0x00009800,
                    0x00004000, 0x00003400, 0x00003600, 0x00003800, 0x00003A00, 0x00000000, 0x00002D00, 0x00000040, 0x00000080, 0x00002A80, 0x000000C0, 0x00000100, 0x00000140, 0x00000180, 0x000001C0, 0x00000200,
                    0x00000240, 0x00000280, 0x000002C0, 0x00000300, 0x00000340, 0x00000380, 0x000003C0, 0x00000400, 0x00000440, 0x00000480, 0x000004C0, 0x00000500, 0x00000540, 0x00000580, 0x000005C0, 0x00000600,
                    0x00000640, 0x00000680, 0x000006C0, 0x00000700, 0x00000740, 0x00000780, 0x000007C0, 0x00000800, 0x00000840, 0x00000880, 0x000008C0, 0x00000900, 0x00000940, 0x00000980, 0x000009C0, 0x00000A00,
                    0x00000A40, 0x00000A80, 0x00000AC0, 0x00000B00, 0x00000B40, 0x00000B80, 0x00000BC0, 0x00000C00, 0x00000C40, 0x00000C80, 0x00000CC0, 0x00000D00, 0x00000D40, 0x00000D80, 0x00000DC0, 0x00000E00,
                    0x00000E40, 0x00000E80, 0x00000EC0, 0x00000F00, 0x00000F40, 0x00000F80, 0x00000FC0, 0x00001000, 0x00001040, 0x00001080, 0x000010C0, 0x00001100, 0x00001140, 0x00001180, 0x000011C0, 0x00001200,
                    0x00001240, 0x00001280, 0x000012C0, 0x00001300, 0x00001340, 0x00001380, 0x000013C0, 0x00001400, 0x00001440, 0x00001480, 0x000014C0, 0x00001500, 0x00001540, 0x00001580, 0x000015C0, 0x00001600,
                    0x00001640, 0x00001680, 0x000016C0, 0x00001700, 0x00001740, 0x00001780, 0x000017C0, 0x00001800, 0x00001840, 0x00001880, 0x000018C0, 0x00001900, 0x00001940, 0x00001980, 0x000019C0, 0x00001A00,
                    0x00001A40, 0x00001A80, 0x00001AC0, 0x00001B00, 0x00001B40, 0x00001B80, 0x00001BC0, 0x00001C00, 0x00001C40, 0x00001C80, 0x00001CC0, 0x00001D00, 0x00001D40, 0x00001D80, 0x00001DC0, 0x00001E00,
                    0x00001E40, 0x00001E80, 0x00001EC0, 0x00001F00, 0x00001F40, 0x00001F80, 0x00001FC0, 0x00002000, 0x00002040, 0x00002080, 0x000020C0, 0x00002100, 0x00002140, 0x00002180, 0x000021C0, 0x00002200,
                    0x00002240, 0x00002280, 0x000022C0, 0x00002300, 0x00002340, 0x00002380, 0x000023C0, 0x00002400, 0x00002440, 0x00002480, 0x000024C0, 0x00002500, 0x00002540, 0x00002580, 0x000025C0, 0x00002600,
                    0x00002640, 0x00002680, 0x000026C0, 0x00002700, 0x00002740, 0x00002780, 0x000027C0, 0x00002800, 0x00002840, 0x00002880, 0x000028C0, 0x00002900, 0x00002B00, 0x00002940, 0x00002980, 0x00002E00,
                    0x00002B80, 0x000029C0, 0x00002F00, 0x00002A00, 0x00002C00, 0x00002A40, 0x00002C80, 0x00003000, 0x00003100, 0x00003200, 0x00003300, 0x00003C00, 0x00004400, 0x00003E00, 0x00004800, 0x00004C00,
                    0x0000A000, 0x0000A800, 0x0000B000, 0x00011000, 0x0000B800, 0x00012000, 0x00013000, 0x00014000, 0x0000C000, 0x00015000, 0x0000C800, 0x00016000, 0x00017000, 0x00018000, 0x00019000, 0x00020000,
                    0x00022000, 0x00024000, 0x00026000, 0x00030000, 0x00034000, 0x00048000, 0x00070000, 0x00080000, 0x000A0000, 0x00180000, 0x00300000, 0x00800000, 0x02000000, 0x08000000, 0x20000000, 0xC0000000,
                };
                constexpr static const unsigned int add_shifted_v[256] = {
                    0x40000000, 0x80000000, 0x10000000, 0x04000000, 0x02000000, 0x01000000, 0x00800000, 0x00300000, 0x00400000, 0x00200000, 0x00100000, 0x00140000, 0x000C0000, 0x00060000, 0x00070000, 0x00080000,
                    0x00040000, 0x00048000, 0x00050000, 0x0002C000, 0x00030000, 0x00020000, 0x00022000, 0x00024000, 0x0001C000, 0x0001A000, 0x00000000, 0x00018800, 0x00018C00, 0x00000200, 0x00019000, 0x00000400,
                    0x00019400, 0x00000600, 0x00000800, 0x00000A00, 0x00000C00, 0x00000E00, 0x00001000, 0x00001200, 0x00001400, 0x00001600, 0x00001800, 0x00001A00, 0x00001C00, 0x00001E00, 0x00002000, 0x00002200,
                    0x00002400, 0x00002600, 0x00002800, 0x00002A00, 0x00002C00, 0x00002E00, 0x00003000, 0x00003200, 0x00003400, 0x00003600, 0x00003800, 0x00003A00, 0x00003C00, 0x00003E00, 0x00004000, 0x00004200,
                    0x00004400, 0x00004600, 0x00004800, 0x00004A00, 0x00004C00, 0x00004E00, 0x00005000, 0x00005200, 0x00005400, 0x00005600, 0x00005800, 0x00005A00, 0x00005C00, 0x00005E00, 0x00006000, 0x00006200,
                    0x00006400, 0x00006600, 0x00006800, 0x00006A00, 0x00006C00, 0x00006E00, 0x00007000, 0x00007200, 0x00007400, 0x00007600, 0x00007800, 0x00007A00, 0x00007C00, 0x00007E00, 0x00008000, 0x00008200,
                    0x00008400, 0x00008600, 0x00008800, 0x00008A00, 0x00008C00, 0x00008E00, 0x00009000, 0x00009200, 0x00009400, 0x00009600, 0x00009800, 0x00009A00, 0x00009C00, 0x00009E00, 0x0000A000, 0x0000A200,
                    0x0000A400, 0x0000A600, 0x0000A800, 0x0000AA00, 0x0000AC00, 0x0000AE00, 0x0000B000, 0x0000B200, 0x0000B400, 0x0000B600, 0x0000B800, 0x0000BA00, 0x0000BC00, 0x0000BE00, 0x0000C000, 0x0000C200,
                    0x0000C400, 0x0000C600, 0x0000C800, 0x0000CA00, 0x0000CC00, 0x0000CE00, 0x0000D000, 0x0000D200, 0x0000D400, 0x0000D600, 0x0000D800, 0x0000DA00, 0x0000DC00, 0x0000DE00, 0x0000E000, 0x0000E200,
                    0x0000E400, 0x0000E600, 0x0000E800, 0x0000EA00, 0x0000EC00, 0x0000EE00, 0x0000F000, 0x0000F200, 0x0000F400, 0x0000F600, 0x0000F800, 0x0000FA00, 0x0000FC00, 0x0000FE00, 0x00010000, 0x00010200,
                    0x00010400, 0x00010600, 0x00010800, 0x00010A00, 0x00010C00, 0x00010E00, 0x00011000, 0x00011200, 0x00011400, 0x00011600, 0x00011800, 0x00011A00, 0x00011C00, 0x00011E00, 0x00012000, 0x00012200,
                    0x00012400, 0x00012600, 0x00012800, 0x00012A00, 0x00012C00, 0x00012E00, 0x00013000, 0x00013200, 0x00013400, 0x00013600, 0x00013800, 0x00013A00, 0x00013C00, 0x00013E00, 0x00014000, 0x00014200,
                    0x00014400, 0x00014600, 0x00014800, 0x00014A00, 0x00014C00, 0x00014E00, 0x00015000, 0x00015200, 0x00015400, 0x00015600, 0x00015800, 0x00015A00, 0x00015C00, 0x00015E00, 0x00016000, 0x00016200,
                    0x00016400, 0x00016600, 0x00016800, 0x00016A00, 0x00016C00, 0x00016E00, 0x00017000, 0x00017200, 0x00017400, 0x00017600, 0x00017800, 0x00017A00, 0x00017C00, 0x00017E00, 0x00018000, 0x00018200,
                    0x00018400, 0x00018600, 0x00019800, 0x0001A800, 0x00019C00, 0x0001B000, 0x0001D000, 0x0001B800, 0x00026000, 0x0001E000, 0x0001F000, 0x00028000, 0x00034000, 0x0002A000, 0x00038000, 0x0003C000,
                    0x00058000, 0x00090000, 0x000A0000, 0x000B0000, 0x000E0000, 0x00180000, 0x001C0000, 0x00280000, 0x00500000, 0x00600000, 0x00C00000, 0x01800000, 0x03000000, 0x08000000, 0x20000000, 0xC0000000,
                };
            };

            class median final {
            public:
                constexpr static const unsigned char shift_y[256] = {
                    0x02, 0x02, 0x05, 0x06, 0x07, 0x07, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B,
                    0x0B, 0x0B, 0x0B, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0F, 0x0F,
                    0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x12, 0x11, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x13, 0x13, 0x14,
                    0x13, 0x13, 0x14, 0x14, 0x14, 0x15, 0x17, 0x16, 0x17, 0x18, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x18, 0x17, 0x18, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x1A, 0x19, 0x19, 0x18, 0x18, 0x19, 0x18, 0x17, 0x18,
                    0x18, 0x19, 0x18, 0x18, 0x18, 0x19, 0x19, 0x1A, 0x1A, 0x18, 0x18, 0x18, 0x18, 0x19, 0x19, 0x19, 0x1A, 0x19, 0x18, 0x17, 0x16, 0x16, 0x15, 0x16, 0x15, 0x16, 0x15, 0x14, 0x15, 0x14, 0x14, 0x14,
                    0x13, 0x13, 0x13, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
                    0x0F, 0x0F, 0x0F, 0x0F, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0E, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0D, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0B, 0x0B,
                    0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0B, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x08, 0x08, 0x08, 0x08, 0x07, 0x07, 0x07, 0x06, 0x04, 0x02,
                };
                constexpr static const unsigned char shift_u[256] = {
                    0x02, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x11, 0x12, 0x13, 0x13, 0x13, 0x14, 0x14, 0x14, 0x15, 0x14, 0x15, 0x15, 0x15, 0x15, 0x14, 0x14, 0x15, 0x15, 0x16,
                    0x17, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
                    0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x18, 0x18, 0x19, 0x18, 0x17, 0x18, 0x16, 0x16, 0x16, 0x15,
                    0x15, 0x15, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14, 0x13, 0x13, 0x13, 0x13, 0x12, 0x12, 0x12, 0x11, 0x10, 0x10, 0x0F, 0x0E, 0x0E, 0x0C, 0x0B, 0x0A, 0x07, 0x05, 0x03, 0x02,
                };
                constexpr static const unsigned char shift_v[256] = {
                    0x01, 0x03, 0x05, 0x07, 0x08, 0x09, 0x0B, 0x0B, 0x0C, 0x0D, 0x0D, 0x0E, 0x0F, 0x0F, 0x10, 0x10, 0x10, 0x11, 0x11, 0x11, 0x12, 0x12, 0x14, 0x14, 0x14, 0x14, 0x15, 0x19, 0x18, 0x19, 0x19, 0x18,
                    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
                    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
                    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
                    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
                    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
                    0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
                    0x19, 0x19, 0x19, 0x19, 0x19, 0x18, 0x19, 0x18, 0x18, 0x16, 0x17, 0x15, 0x14, 0x14, 0x13, 0x12, 0x12, 0x11, 0x10, 0x0F, 0x0F, 0x0E, 0x0D, 0x0C, 0x0C, 0x0B, 0x0A, 0x09, 0x08, 0x07, 0x04, 0x02,
                };

                constexpr static const unsigned int add_shifted_y[256] = {
                    0x40000000, 0x80000000, 0x28000000, 0x20000000, 0x16000000, 0x18000000, 0x0F000000, 0x10000000, 0x11000000, 0x09000000, 0x09800000, 0x0A000000, 0x0A800000, 0x0B000000, 0x0B800000, 0x05000000,
                    0x05400000, 0x05800000, 0x05C00000, 0x06000000, 0x06400000, 0x06800000, 0x06C00000, 0x07000000, 0x02400000, 0x02600000, 0x02800000, 0x02A00000, 0x02C00000, 0x02E00000, 0x03000000, 0x03200000,
                    0x03400000, 0x03600000, 0x03800000, 0x01100000, 0x01200000, 0x01300000, 0x01400000, 0x01500000, 0x01600000, 0x01700000, 0x01800000, 0x01900000, 0x00800000, 0x00880000, 0x00900000, 0x00980000,
                    0x00A00000, 0x00A80000, 0x00B00000, 0x00B80000, 0x00C00000, 0x00400000, 0x00440000, 0x00480000, 0x004C0000, 0x00500000, 0x00540000, 0x00580000, 0x005C0000, 0x00600000, 0x001E0000, 0x00200000,
                    0x00220000, 0x00240000, 0x00260000, 0x00280000, 0x002A0000, 0x002C0000, 0x000D0000, 0x000E0000, 0x000F0000, 0x00100000, 0x00110000, 0x00120000, 0x00130000, 0x00140000, 0x00150000, 0x00058000,
                    0x00060000, 0x00068000, 0x00070000, 0x00078000, 0x00080000, 0x0001C000, 0x00088000, 0x00020000, 0x00024000, 0x00028000, 0x0002C000, 0x00030000, 0x00034000, 0x0000E000, 0x00010000, 0x00006000,
                    0x00012000, 0x00014000, 0x00007000, 0x00008000, 0x00009000, 0x00003800, 0x00001A00, 0x00002400, 0x00001C00, 0x00000A00, 0x00000200, 0x00000280, 0x00000000, 0x00000040, 0x00000080, 0x00000B00,
                    0x00001E00, 0x00000C00, 0x00000300, 0x00000380, 0x00000400, 0x000000C0, 0x00000480, 0x00000100, 0x00000500, 0x00000580, 0x00000D00, 0x00000E00, 0x00000600, 0x00000F00, 0x00002000, 0x00001000,
                    0x00001100, 0x00000680, 0x00001200, 0x00001300, 0x00001400, 0x00000700, 0x00000780, 0x00000140, 0x00000180, 0x00001500, 0x00001600, 0x00001700, 0x00001800, 0x00000800, 0x00000880, 0x00000900,
                    0x000001C0, 0x00000980, 0x00001900, 0x00002200, 0x00002800, 0x00002C00, 0x00004000, 0x00003000, 0x00004800, 0x00003400, 0x00005000, 0x0000A000, 0x00005800, 0x0000B000, 0x0000C000, 0x0000D000,
                    0x00016000, 0x00018000, 0x0001A000, 0x00038000, 0x0003C000, 0x00040000, 0x00044000, 0x00048000, 0x0004C000, 0x00050000, 0x00054000, 0x00090000, 0x00098000, 0x000A0000, 0x000A8000, 0x000B0000,
                    0x000B8000, 0x000C0000, 0x000C8000, 0x00160000, 0x00170000, 0x00180000, 0x00190000, 0x001A0000, 0x001B0000, 0x001C0000, 0x001D0000, 0x002E0000, 0x00300000, 0x00320000, 0x00340000, 0x00360000,
                    0x00380000, 0x003A0000, 0x003C0000, 0x003E0000, 0x00640000, 0x00680000, 0x006C0000, 0x00700000, 0x00740000, 0x00780000, 0x007C0000, 0x00C80000, 0x00D00000, 0x00D80000, 0x00E00000, 0x00E80000,
                    0x00F00000, 0x00F80000, 0x01000000, 0x01080000, 0x01A00000, 0x01B00000, 0x01C00000, 0x01D00000, 0x01E00000, 0x01F00000, 0x02000000, 0x02100000, 0x02200000, 0x02300000, 0x03A00000, 0x03C00000,
                    0x03E00000, 0x04000000, 0x04200000, 0x04400000, 0x04600000, 0x04800000, 0x04A00000, 0x04C00000, 0x04E00000, 0x07400000, 0x07800000, 0x07C00000, 0x08000000, 0x08400000, 0x08800000, 0x08C00000,
                    0x0C000000, 0x0C800000, 0x0D000000, 0x0D800000, 0x0E000000, 0x0E800000, 0x12000000, 0x13000000, 0x14000000, 0x15000000, 0x1A000000, 0x1C000000, 0x1E000000, 0x24000000, 0x30000000, 0xC0000000,
                };
                constexpr static const unsigned int add_shifted_u[256] = {
                    0x40000000, 0x80000000, 0x10000000, 0x04000000, 0x01000000, 0x00800000, 0x00400000, 0x00200000, 0x00180000, 0x000C0000, 0x00080000, 0x00050000, 0x00038000, 0x00040000, 0x00028000, 0x0001A000,
                    0x0001C000, 0x0001E000, 0x0000A000, 0x0000B000, 0x0000C000, 0x00005000, 0x0000D000, 0x00005800, 0x00006000, 0x00006800, 0x00007000, 0x0000E000, 0x0000F000, 0x00007800, 0x00008000, 0x00004000,
                    0x00003C00, 0x00002300, 0x00002380, 0x00002400, 0x00002480, 0x00002500, 0x00002580, 0x00002600, 0x00002680, 0x00002700, 0x00002780, 0x00002800, 0x00002880, 0x00002900, 0x00002980, 0x00002A00,
                    0x00002A80, 0x00002B00, 0x00002B80, 0x00002C00, 0x00002C80, 0x00002D00, 0x00002D80, 0x00002E00, 0x00002E80, 0x00002F00, 0x00000000, 0x00000040, 0x00000080, 0x000000C0, 0x00000100, 0x00000140,
                    0x00000180, 0x000001C0, 0x00000200, 0x00000240, 0x00000280, 0x000002C0, 0x00000300, 0x00000340, 0x00000380, 0x000003C0, 0x00000400, 0x00000440, 0x00000480, 0x000004C0, 0x00000500, 0x00000540,
                    0x00000580, 0x000005C0, 0x00000600, 0x00000640, 0x00000680, 0x000006C0, 0x00000700, 0x00000740, 0x00000780, 0x000007C0, 0x00000800, 0x00000840, 0x00000880, 0x000008C0, 0x00000900, 0x00000940,
                    0x00000980, 0x000009C0, 0x00000A00, 0x00000A40, 0x00000A80, 0x00000AC0, 0x00000B00, 0x00000B40, 0x00000B80, 0x00000BC0, 0x00000C00, 0x00000C40, 0x00000C80, 0x00000CC0, 0x00000D00, 0x00000D40,
                    0x00000D80, 0x00000DC0, 0x00000E00, 0x00000E40, 0x00000E80, 0x00000EC0, 0x00000F00, 0x00000F40, 0x00000F80, 0x00000FC0, 0x00001000, 0x00001040, 0x00001080, 0x000010C0, 0x00001100, 0x00001140,
                    0x00001180, 0x000011C0, 0x00001200, 0x00001240, 0x00001280, 0x000012C0, 0x00001300, 0x00001340, 0x00001380, 0x000013C0, 0x00001400, 0x00001440, 0x00001480, 0x000014C0, 0x00001500, 0x00001540,
                    0x00001580, 0x000015C0, 0x00001600, 0x00001640, 0x00001680, 0x000016C0, 0x00001700, 0x00001740, 0x00001780, 0x000017C0, 0x00001800, 0x00001840, 0x00001880, 0x000018C0, 0x00001900, 0x00001940,
                    0x00001980, 0x000019C0, 0x00001A00, 0x00001A40, 0x00001A80, 0x00001AC0, 0x00001B00, 0x00001B40, 0x00001B80, 0x00001BC0, 0x00001C00, 0x00001C40, 0x00001C80, 0x00001CC0, 0x00001D00, 0x00001D40,
                    0x00001D80, 0x00001DC0, 0x00001E00, 0x00001E40, 0x00001E80, 0x00001EC0, 0x00001F00, 0x00001F40, 0x00001F80, 0x00001FC0, 0x00002000, 0x00002040, 0x00002080, 0x000020C0, 0x00002100, 0x00002140,
                    0x00002180, 0x000021C0, 0x00002200, 0x00002240, 0x00002280, 0x000022C0, 0x00002F80, 0x00003000, 0x00003080, 0x00003100, 0x00003180, 0x00003200, 0x00003280, 0x00003300, 0x00003380, 0x00003400,
                    0x00003480, 0x00003500, 0x00003580, 0x00003600, 0x00003680, 0x00003700, 0x00003800, 0x00003900, 0x00003780, 0x00003A00, 0x00003E00, 0x00003B00, 0x00004400, 0x00004800, 0x00004C00, 0x00008800,
                    0x00009000, 0x00009800, 0x00010000, 0x00011000, 0x00012000, 0x00013000, 0x00014000, 0x00015000, 0x00016000, 0x00017000, 0x00018000, 0x00019000, 0x00020000, 0x00022000, 0x00024000, 0x00026000,
                    0x0002C000, 0x00030000, 0x00034000, 0x00048000, 0x00060000, 0x00070000, 0x000A0000, 0x00100000, 0x00140000, 0x00300000, 0x00600000, 0x00C00000, 0x02000000, 0x08000000, 0x20000000, 0xC0000000,
                };
                constexpr static const unsigned int add_shifted_v[256] = {
                    0x80000000, 0x20000000, 0x08000000, 0x04000000, 0x02000000, 0x01000000, 0x00600000, 0x00800000, 0x00300000, 0x00180000, 0x00200000, 0x00100000, 0x00080000, 0x000A0000, 0x00040000, 0x00050000,
                    0x00060000, 0x00020000, 0x00028000, 0x00030000, 0x00010000, 0x00014000, 0x00008000, 0x00009000, 0x0000A000, 0x0000B000, 0x00007000, 0x00000000, 0x00006400, 0x00000080, 0x00000100, 0x00006500,
                    0x00000180, 0x00000200, 0x00000280, 0x00000300, 0x00000380, 0x00000400, 0x00000480, 0x00000500, 0x00000580, 0x00000600, 0x00000680, 0x00000700, 0x00000780, 0x00000800, 0x00000880, 0x00000900,
                    0x00000980, 0x00000A00, 0x00000A80, 0x00000B00, 0x00000B80, 0x00000C00, 0x00000C80, 0x00000D00, 0x00000D80, 0x00000E00, 0x00000E80, 0x00000F00, 0x00000F80, 0x00001000, 0x00001080, 0x00001100,
                    0x00001180, 0x00001200, 0x00001280, 0x00001300, 0x00001380, 0x00001400, 0x00001480, 0x00001500, 0x00001580, 0x00001600, 0x00001680, 0x00001700, 0x00001780, 0x00001800, 0x00001880, 0x00001900,
                    0x00001980, 0x00001A00, 0x00001A80, 0x00001B00, 0x00001B80, 0x00001C00, 0x00001C80, 0x00001D00, 0x00001D80, 0x00001E00, 0x00001E80, 0x00001F00, 0x00001F80, 0x00002000, 0x00002080, 0x00002100,
                    0x00002180, 0x00002200, 0x00002280, 0x00002300, 0x00002380, 0x00002400, 0x00002480, 0x00002500, 0x00002580, 0x00002600, 0x00002680, 0x00002700, 0x00002780, 0x00002800, 0x00002880, 0x00002900,
                    0x00002980, 0x00002A00, 0x00002A80, 0x00002B00, 0x00002B80, 0x00002C00, 0x00002C80, 0x00002D00, 0x00002D80, 0x00002E00, 0x00002E80, 0x00002F00, 0x00002F80, 0x00003000, 0x00003080, 0x00003100,
                    0x00003180, 0x00003200, 0x00003280, 0x00003300, 0x00003380, 0x00003400, 0x00003480, 0x00003500, 0x00003580, 0x00003600, 0x00003680, 0x00003700, 0x00003780, 0x00003800, 0x00003880, 0x00003900,
                    0x00003980, 0x00003A00, 0x00003A80, 0x00003B00, 0x00003B80, 0x00003C00, 0x00003C80, 0x00003D00, 0x00003D80, 0x00003E00, 0x00003E80, 0x00003F00, 0x00003F80, 0x00004000, 0x00004080, 0x00004100,
                    0x00004180, 0x00004200, 0x00004280, 0x00004300, 0x00004380, 0x00004400, 0x00004480, 0x00004500, 0x00004580, 0x00004600, 0x00004680, 0x00004700, 0x00004780, 0x00004800, 0x00004880, 0x00004900,
                    0x00004980, 0x00004A00, 0x00004A80, 0x00004B00, 0x00004B80, 0x00004C00, 0x00004C80, 0x00004D00, 0x00004D80, 0x00004E00, 0x00004E80, 0x00004F00, 0x00004F80, 0x00005000, 0x00005080, 0x00005100,
                    0x00005180, 0x00005200, 0x00005280, 0x00005300, 0x00005380, 0x00005400, 0x00005480, 0x00005500, 0x00005580, 0x00005600, 0x00005680, 0x00005700, 0x00005780, 0x00005800, 0x00005880, 0x00005900,
                    0x00005980, 0x00005A00, 0x00005A80, 0x00005B00, 0x00005B80, 0x00005C00, 0x00005C80, 0x00005D00, 0x00006600, 0x00005D80, 0x00005E00, 0x00005E80, 0x00005F00, 0x00005F80, 0x00006000, 0x00006080,
                    0x00006100, 0x00006180, 0x00006200, 0x00006280, 0x00006300, 0x00006700, 0x00006380, 0x00006800, 0x00006900, 0x00006C00, 0x00006A00, 0x00007800, 0x0000C000, 0x0000D000, 0x0000E000, 0x00018000,
                    0x0001C000, 0x00038000, 0x00070000, 0x000C0000, 0x000E0000, 0x00140000, 0x00280000, 0x00400000, 0x00500000, 0x00A00000, 0x00C00000, 0x01800000, 0x03000000, 0x06000000, 0x10000000, 0x40000000,
                };
            };
        };
    };

private:
    class table_type final {
    public:
        unsigned char shift[256];
        unsigned int add_shifted[256];
        unsigned char* pointers[32];
        unsigned char data[129 * 25];
    };

private:
    bool valid;
    int width;
    int height;
    bool interlaced;
    bool decorrelated;
    format_type format;
    predictor_type predictor;
    table_type tables[3];

private:
    constexpr static void copy_bytes(const void* source, void* destination, unsigned int length) {
        const unsigned char* data_source = static_cast<const unsigned char*>(source);
        unsigned char* data_destination = static_cast<unsigned char*>(destination);
        while (length--) {
            *data_destination++ = *data_source++;
        }
    }

    constexpr static int find_most_significant_bit_index(unsigned int value) {
        for (int index = 31; index >= 0; --index) {
            if ((value & 0x80000000) != 0) {
                return index;
            }
            value += value;
        }
        return -1;
    }

public:
    huffyuv(
        const unsigned char* stream_header_data,
        unsigned long long int stream_header_length,
        bool ignore_interlaced_flag = false
    )
        : valid(false)
    {
        if ((stream_header_data == nullptr) || (stream_header_length < 40)) {
            std::fprintf(stderr, "Error: Invalid stream header.\n");
            return;
        }

        unsigned int header_length = 0;
        copy_bytes(&stream_header_data[0], &header_length, 4);
        if (header_length != stream_header_length) {
            std::fprintf(stderr, "Error: Invalid stream header length.\n");
            return;
        }

        copy_bytes(&stream_header_data[4], &this->width, 4);
        copy_bytes(&stream_header_data[8], &this->height, 4);

        if ((this->width <= 0) || (this->height <= 0)) {
            std::fprintf(stderr, "Error: Invalid stream dimensions.\n");
            return;
        }
        
        if ((this->width % 4) != 0) {
            std::fprintf(stderr, "Error: Invalid stream dimensions, width must be divisible by four.\n");
            return;
        }

        this->interlaced = (this->height > huffyuv::interlaced_threshold);
        this->decorrelated = false;

        unsigned short bit_count = 0;
        copy_bytes(&stream_header_data[14], &bit_count, 2);

        // Version 1:

        // If the stream header is only 40 bytes the builtin tables are used.
        if (stream_header_length == 40) {
            // Extract the bit count from the stream header.
            switch (bit_count & ~0x0007) {
                case 32: {
                    this->format = format_type::bgra;
                } break;
                case 24: {
                    this->format = format_type::bgr;
                } break;
                case 16: {
                    this->format = format_type::yuyv;
                } break;
                default: {
                    std::fprintf(stderr, "Error: Invalid stream format.\n");
                    return;
                }
            }

            // The builtin tables use the classic predictor.
            this->predictor = predictor_type::classic;

            if (!this->prepare_tables(nullptr, 0)) {
                std::fprintf(stderr, "Error: Failed to prepare tables.\n");
                return;
            }

            this->valid = true;
            return;
        }

        // Version 2:

        // If the stream header is larger than 40 bytes the tables are stored in the stream header.
        // If the bit count low bits are not zero there is no extra configuration, just the the tables.
        if ((bit_count & 0x0007) != 0) {

            // Extract the format from the bit count high bits.
            switch (bit_count & ~0x0007) {
                case 32: {
                    this->format = format_type::bgra;
                } break;
                case 24: {
                    this->format = format_type::bgr;
                } break;
                case 16: {
                    this->format = format_type::yuyv;
                } break;
                default: {
                    std::fprintf(stderr, "Error: Invalid stream format.\n");
                    return;
                }
            }

            // Extract the prediction mode from the bit count low bits.
            switch (bit_count & 0x0007) {
                case 1: {
                    this->predictor = predictor_type::left;
                    this->decorrelated = false;
                } break;
                case 2: {
                    this->predictor = predictor_type::left;
                    this->decorrelated = true;
                } break;
                case 3: {
                    this->predictor = predictor_type::gradient;
                    this->decorrelated = true;
                } break;
                case 4: {
                    this->predictor = predictor_type::median;
                    this->decorrelated = true;
                } break;
                default: {
                    std::fprintf(stderr, "Error: Invalid stream predictor.\n");
                    return;
                }
            }

            if (!this->prepare_tables(&stream_header_data[40], stream_header_length - 40)) {
                std::fprintf(stderr, "Error: Failed to decode tables.\n");
                return;
            }

            this->valid = true;
            return;
        }

        // Version 3:

        // The stream header contains four bytes of extra configuration and then the tables.

        // Validate the stream header length covers the additional configuration at minimum.
        if (stream_header_length < 44) {
            std::fprintf(stderr, "Error: Missing additional configuration parameters in stream header.\n");
            return;
        }

        // Extract the bit count from the extra configuration.
        bit_count = stream_header_data[41];
        if ((bit_count & 0x0007) != 0) {
            std::fprintf(stderr, "Error: Invalid additional configuration parameters in stream header.\n");
            return;
        }

        // Extract the format from the bit count.
        switch (bit_count & ~0x0007) {
            case 32: {
                this->format = format_type::bgra;
            } break;
            case 24: {
                this->format = format_type::bgr;
            } break;
            case 16: {
                this->format = format_type::yuyv;
            } break;
            default: {
                std::fprintf(stderr, "Error: Invalid bit count in stream header extradata.\n");
                return;
            }
        }

        // Extract the prediction mode from the extra configuration.
        switch (stream_header_data[40] & 0x07) {
            default:
            case 0: {
                this->predictor = predictor_type::left;
            } break;
            case 1: {
                this->predictor = predictor_type::gradient;
            } break;
            case 2: {
                this->predictor = predictor_type::median;
            } break;
        }

        // Extract whether the data is decorrelated from the extra configuration.
        this->decorrelated = stream_header_data[40] & 0x40;

        // If we are not ignoring the interlaced flag.
        if (!ignore_interlaced_flag) {
            // If the flag is set to interlaced, override the interlaced boolean.
            if (((stream_header_data[42] >> 4) & 0x0F) == 0x01) {
                this->interlaced = true;
            }
            // If the flag is set to progressive, override the interlaced boolean.
            else if (((stream_header_data[42] >> 4) & 0x0F) == 0x02) {
                this->interlaced = false;
            }
            // Otherwise leave it as it was.
        }

        // unsigned char unused = stream_header_data[43];

        if (!this->prepare_tables(&stream_header_data[44], stream_header_length - 44)) {
            std::fprintf(stderr, "Error: Failed to decode tables.\n");
            return;
        }

        this->valid = true;
    }

public:
    huffyuv(
        int stream_width,
        int stream_height,
        bool stream_interlaced,
        bool stream_decorrelated,
        format_type stream_format,
        predictor_type stream_predictor,
        const unsigned char* table_data = nullptr,
        unsigned long long int table_length = 0
    )
        : valid(false)
        , width(stream_width)
        , height(stream_height)
        , interlaced(stream_interlaced)
        , decorrelated(stream_decorrelated)
        , format(stream_format)
        , predictor(stream_predictor)
    {
        if ((this->width <= 0) || (this->height <= 0)) {
            std::fprintf(stderr, "Error: Invalid dimensions.\n");
            return;
        }
        if ((this->width % 4) != 0) {
            std::fprintf(stderr, "Error: Invalid dimensions, width must be divisible by four.\n");
            return;
        }
        if ((stream_format == format_type::yuyv) && (stream_decorrelated)) {
            std::fprintf(stderr, "Error: Invalid settings, YUV formats cannot be decorrelated.\n");
            return;
        }
        if ((stream_format == format_type::bgr) && (stream_predictor == predictor_type::gradient) && (!stream_decorrelated)) {
            std::fprintf(stderr, "Error: Invalid settings, BGR formats must be decorrelated when using the gradient predictor.\n");
            return;
        }
        if ((stream_format == format_type::bgra) && (stream_predictor == predictor_type::gradient) && (!stream_decorrelated)) {
            std::fprintf(stderr, "Error: Invalid settings, BGRA formats must be decorrelated when using the gradient predictor.\n");
            return;
        }
        if ((stream_format == format_type::bgr) && (stream_predictor == predictor_type::median)) {
            std::fprintf(stderr, "Error: Invalid settings, BGR formats cannot use the median predictor.\n");
            return;
        }
        if ((stream_format == format_type::bgra) && (stream_predictor == predictor_type::median)) {
            std::fprintf(stderr, "Error: Invalid settings, BGRA formats cannot use the median predictor.\n");
            return;
        }
        if ((stream_predictor == predictor_type::classic) && ((table_data != nullptr) || (table_length != 0))) {
            std::fprintf(stderr, "Error: Invalid settings, the classic predictor must not provide table data.\n");
            return;
        }
        if (!this->prepare_tables(table_data, table_length)) {
            std::fprintf(stderr, "Error: Failed to prepare tables.\n");
            return;
        }
        this->valid = true;
    }

private:
    bool prepare_tables(
        const unsigned char* table_data,
        unsigned long long int table_length
    ) {
        // Check if table data was not found, if not use the builtin data.
        if ((table_data == nullptr) || (table_length == 0)) {
            switch (this->format) {
                case format_type::yuyv: {
                    switch (this->predictor) {
                        case predictor_type::classic: {
                            copy_bytes(builtin_tables::yuv::classic::shift_y, this->tables[0].shift, 256 * sizeof(unsigned char));
                            copy_bytes(builtin_tables::yuv::classic::shift_u, this->tables[1].shift, 256 * sizeof(unsigned char));
                            copy_bytes(builtin_tables::yuv::classic::shift_v, this->tables[2].shift, 256 * sizeof(unsigned char));
                            copy_bytes(builtin_tables::yuv::classic::add_shifted_y, this->tables[0].add_shifted, 256 * sizeof(unsigned int));
                            copy_bytes(builtin_tables::yuv::classic::add_shifted_u, this->tables[1].add_shifted, 256 * sizeof(unsigned int));
                            copy_bytes(builtin_tables::yuv::classic::add_shifted_v, this->tables[2].add_shifted, 256 * sizeof(unsigned int));
                        } break;
                        case predictor_type::left: {
                            copy_bytes(builtin_tables::yuv::left::shift_y, this->tables[0].shift, 256 * sizeof(unsigned char));
                            copy_bytes(builtin_tables::yuv::left::shift_u, this->tables[1].shift, 256 * sizeof(unsigned char));
                            copy_bytes(builtin_tables::yuv::left::shift_v, this->tables[2].shift, 256 * sizeof(unsigned char));
                            copy_bytes(builtin_tables::yuv::left::add_shifted_y, this->tables[0].add_shifted, 256 * sizeof(unsigned int));
                            copy_bytes(builtin_tables::yuv::left::add_shifted_u, this->tables[1].add_shifted, 256 * sizeof(unsigned int));
                            copy_bytes(builtin_tables::yuv::left::add_shifted_v, this->tables[2].add_shifted, 256 * sizeof(unsigned int));
                        } break;
                        case predictor_type::gradient: {
                            copy_bytes(builtin_tables::yuv::gradient::shift_y, this->tables[0].shift, 256 * sizeof(unsigned char));
                            copy_bytes(builtin_tables::yuv::gradient::shift_u, this->tables[1].shift, 256 * sizeof(unsigned char));
                            copy_bytes(builtin_tables::yuv::gradient::shift_v, this->tables[2].shift, 256 * sizeof(unsigned char));
                            copy_bytes(builtin_tables::yuv::gradient::add_shifted_y, this->tables[0].add_shifted, 256 * sizeof(unsigned int));
                            copy_bytes(builtin_tables::yuv::gradient::add_shifted_u, this->tables[1].add_shifted, 256 * sizeof(unsigned int));
                            copy_bytes(builtin_tables::yuv::gradient::add_shifted_v, this->tables[2].add_shifted, 256 * sizeof(unsigned int));
                        } break;
                        case predictor_type::median: {
                            copy_bytes(builtin_tables::yuv::median::shift_y, this->tables[0].shift, 256 * sizeof(unsigned char));
                            copy_bytes(builtin_tables::yuv::median::shift_u, this->tables[1].shift, 256 * sizeof(unsigned char));
                            copy_bytes(builtin_tables::yuv::median::shift_v, this->tables[2].shift, 256 * sizeof(unsigned char));
                            copy_bytes(builtin_tables::yuv::median::add_shifted_y, this->tables[0].add_shifted, 256 * sizeof(unsigned int));
                            copy_bytes(builtin_tables::yuv::median::add_shifted_u, this->tables[1].add_shifted, 256 * sizeof(unsigned int));
                            copy_bytes(builtin_tables::yuv::median::add_shifted_v, this->tables[2].add_shifted, 256 * sizeof(unsigned int));
                        } break;
                    }
                } break;
                case format_type::bgr:
                case format_type::bgra: {
                    switch (this->predictor) {
                        case predictor_type::classic: {
                            copy_bytes(builtin_tables::rgb::classic::shift_b, this->tables[0].shift, 256 * sizeof(unsigned char));
                            copy_bytes(builtin_tables::rgb::classic::shift_g, this->tables[1].shift, 256 * sizeof(unsigned char));
                            copy_bytes(builtin_tables::rgb::classic::shift_r, this->tables[2].shift, 256 * sizeof(unsigned char));
                            copy_bytes(builtin_tables::rgb::classic::add_shifted_b, this->tables[0].add_shifted, 256 * sizeof(unsigned int));
                            copy_bytes(builtin_tables::rgb::classic::add_shifted_g, this->tables[1].add_shifted, 256 * sizeof(unsigned int));
                            copy_bytes(builtin_tables::rgb::classic::add_shifted_r, this->tables[2].add_shifted, 256 * sizeof(unsigned int));
                        } break;
                        case predictor_type::left: {
                            if (!this->decorrelated) {
                                copy_bytes(builtin_tables::rgb::left::shift_b, this->tables[0].shift, 256 * sizeof(unsigned char));
                                copy_bytes(builtin_tables::rgb::left::shift_g, this->tables[1].shift, 256 * sizeof(unsigned char));
                                copy_bytes(builtin_tables::rgb::left::shift_r, this->tables[2].shift, 256 * sizeof(unsigned char));
                                copy_bytes(builtin_tables::rgb::left::add_shifted_b, this->tables[0].add_shifted, 256 * sizeof(unsigned int));
                                copy_bytes(builtin_tables::rgb::left::add_shifted_g, this->tables[1].add_shifted, 256 * sizeof(unsigned int));
                                copy_bytes(builtin_tables::rgb::left::add_shifted_r, this->tables[2].add_shifted, 256 * sizeof(unsigned int));
                            }
                            else {
                                copy_bytes(builtin_tables::rgb::left_decorrelate::shift_bg, this->tables[0].shift, 256 * sizeof(unsigned char));
                                copy_bytes(builtin_tables::rgb::left_decorrelate::shift_g, this->tables[1].shift, 256 * sizeof(unsigned char));
                                copy_bytes(builtin_tables::rgb::left_decorrelate::shift_rg, this->tables[2].shift, 256 * sizeof(unsigned char));
                                copy_bytes(builtin_tables::rgb::left_decorrelate::add_shifted_bg, this->tables[0].add_shifted, 256 * sizeof(unsigned int));
                                copy_bytes(builtin_tables::rgb::left_decorrelate::add_shifted_g, this->tables[1].add_shifted, 256 * sizeof(unsigned int));
                                copy_bytes(builtin_tables::rgb::left_decorrelate::add_shifted_rg, this->tables[2].add_shifted, 256 * sizeof(unsigned int));
                            }
                        } break;
                        case predictor_type::gradient: {
                            if (!this->decorrelated) {
                                return false;
                            }
                            else {
                                copy_bytes(builtin_tables::rgb::gradient_decorrelate::shift_bg, this->tables[0].shift, 256 * sizeof(unsigned char));
                                copy_bytes(builtin_tables::rgb::gradient_decorrelate::shift_g, this->tables[1].shift, 256 * sizeof(unsigned char));
                                copy_bytes(builtin_tables::rgb::gradient_decorrelate::shift_rg, this->tables[2].shift, 256 * sizeof(unsigned char));
                                copy_bytes(builtin_tables::rgb::gradient_decorrelate::add_shifted_bg, this->tables[0].add_shifted, 256 * sizeof(unsigned int));
                                copy_bytes(builtin_tables::rgb::gradient_decorrelate::add_shifted_g, this->tables[1].add_shifted, 256 * sizeof(unsigned int));
                                copy_bytes(builtin_tables::rgb::gradient_decorrelate::add_shifted_rg, this->tables[2].add_shifted, 256 * sizeof(unsigned int));
                            }
                        } break;
                        case predictor_type::median: {
                            return false;
                        } break;
                    }
                } break;
            }
        }
        // Otherwise table data was found in the stream header.
        else {
            // Decompress runlength encoded table data of bit lengths per code.
            // Stored in these orders:
            //  - YUV: Y table, U table, V table
            //  - RGB (correlated): B table, G table, R table
            //  - RGB (decorrelated): B-G table, G table, R-G table
            // Note: For RGBA data the R or R-G table is used for the alpha channel.
            {
                unsigned int data_index = 0;
                for (int channel_index = 0; channel_index < 3; ++channel_index) {
                    int table_index = 0;
                    do {
                        if (data_index >= table_length) {
                            std::fprintf(stderr, "Error: Invalid table in stream header, insufficient data.\n");
                            return false;
                        }
                        const unsigned char value = table_data[data_index] & 0x1F;
                        int repetitions = table_data[data_index++] >> 5;
                        if (repetitions == 0) {
                            if (data_index >= table_length) {
                                std::fprintf(stderr, "Error: Invalid table in stream header, insufficient data after zero repetitions flag.\n");
                                return false;
                            }
                            repetitions = table_data[data_index++];
                            if (repetitions == 0) {
                                std::fprintf(stderr, "Error: Invalid table in stream header, zero repetitions.\n");
                                return false;
                            }
                        }
                        if (table_index + repetitions > 256) {
                            std::fprintf(stderr, "Error: Invalid table in stream header, invalid runlength encoding.\n");
                            return false;
                        }
                        while (repetitions--) {
                            this->tables[channel_index].shift[table_index++] = value;
                        }
                    } while (table_index < 256);
                }
                // Should be at least one null byte at the end.
                if (data_index == table_length) {
                    std::fprintf(stderr, "Warning: Invalid table in stream header, missing null byte.\n");
                    //return false;
                }
                else if (table_data[data_index] != 0x00) {
                    std::fprintf(stderr, "Warning: Invalid table in stream header, invalid null byte.\n");
                    //return false;
                }
            }

            // Calculate the add shifted tables.
            for (int channel_index = 0; channel_index < 3; ++channel_index) {
                int min_bits_processed = 32;
                unsigned int bits = 0;
                do {
                    int max_bits_pending = 0;
                    for (int i = 0; i < 256; ++i) {
                        if ((this->tables[channel_index].shift[i] < min_bits_processed) && (this->tables[channel_index].shift[i] > max_bits_pending)) {
                            max_bits_pending = this->tables[channel_index].shift[i];
                        }
                    }
                    const unsigned int bit = 1 << (32 - max_bits_pending);
                    if (bits & (bit - 1)) {
                        std::fprintf(stderr, "Error: Invalid table in stream header.\n");
                        return false;
                    }
                    for (int i = 0; i < 256; ++i) {
                        if (this->tables[channel_index].shift[i] == max_bits_pending) {
                            this->tables[channel_index].add_shifted[i] = bits;
                            bits += bit;
                        }
                    }
                    min_bits_processed = max_bits_pending;
                } while (bits & 0xFFFFFFFF);
            }
        }

        // Compute the huffyuv tables from the table data.
        for (int channel_index = 0; channel_index < 3; ++channel_index) {
            int code_lengths[256] = {};
            int code_firstbits[256] = {};
            int table_lengths[32];
            for (int i = 0; i < 32; ++i) {
                table_lengths[i] = -1;
            }
            int all_zero_code = -1;
            for (int i = 0; i < 256; ++i) {
                if (this->tables[channel_index].add_shifted[i] != 0) {
                    for (int firstbit = 31; firstbit >= 0; --firstbit) {
                        if (this->tables[channel_index].add_shifted[i] & (1 << firstbit)) {
                            code_firstbits[i] = firstbit;
                            const int code_length = this->tables[channel_index].shift[i] - (32 - firstbit);
                            code_lengths[i] = code_length;
                            table_lengths[firstbit] = static_cast<int>(table_lengths[firstbit]) > code_length ? static_cast<int>(table_lengths[firstbit]) : code_length;
                            break;
                        }
                    }
                } else {
                    all_zero_code = i;
                }
            }
            if (all_zero_code < 0) {
                std::fprintf(stderr, "Error: Failed to find all zero code in table.\n");
                return false;
            }
            unsigned char* p = this->tables[channel_index].data;
            *p++ = 31;
            *p++ = static_cast<unsigned char>(all_zero_code);
            for (int i = 0; i < 32; ++i) {
                if (table_lengths[i] == -1) {
                    this->tables[channel_index].pointers[i] = this->tables[channel_index].data;
                } else {
                    this->tables[channel_index].pointers[i] = p;
                    *p++ = static_cast<unsigned char>(i - table_lengths[i]);
                    p += 1 << table_lengths[i];
                }
            }
            for (int i = 0; i < 256; ++i) {
                if (this->tables[channel_index].add_shifted[i]) {
                    int firstbit = code_firstbits[i];
                    int val = static_cast<int>(this->tables[channel_index].add_shifted[i]) - (1 << firstbit);
                    unsigned char* table = this->tables[channel_index].pointers[firstbit];
                    for (int j = 0; j < (1 << (table_lengths[firstbit] - code_lengths[i])); ++j) {
                        (&table[1 + (val >> table[0])])[j] = static_cast<unsigned char>(i);
                    }
                }
            }
        }

        return true;
    }

public:
    bool generate_stream_header(
        unsigned char* stream_header_data,
        unsigned int stream_header_length
    ) {
        if ((stream_header_data == nullptr) || (stream_header_length == 0)) {
            return false;
        }

        // Minimum required for strf vids header is 40 bytes.
        if (stream_header_length < 40) {
            return false;
        }

        unsigned int packed_table_size = 0;

        // Validate header size, it must be one of:
        //   size == 40 and predictor is classic.
        //   size == 40 + get_packed_table_size() and predictor is NOT classic.
        //   size == 40 + 4 + get_packed_table_size() and predictor is NOT classic.
        if (this->predictor == predictor_type::classic) {
            if (stream_header_length != 40) {
                return false;
            }
        }
        else {
            packed_table_size = this->get_packed_table_size();
            if (
                (stream_header_length != 40 + packed_table_size) &&
                (stream_header_length != 40 + 4 + packed_table_size)
            ) {
                return false;
            }
        }

        unsigned int channels = 0;
        switch (this->format) {
            case format_type::yuyv: channels = 2; break;
            case format_type::bgr:  channels = 3; break;
            case format_type::bgra: channels = 4; break;
            default: return false;
        }

        copy_bytes(&stream_header_length, &stream_header_data[0], 4);
        copy_bytes(&this->width, &stream_header_data[4], 4);
        copy_bytes(&this->height, &stream_header_data[8], 4);
        const unsigned short planes = 1;
        copy_bytes(&planes, &stream_header_data[12], 2);

        unsigned int packed_table_index = 0;

        unsigned short bit_count = 0;
        // if size == 40: bit_count = bit count.
        if (stream_header_length == 40) {
            bit_count = channels * 8;
        }
        // if size == 40 + get_packed_table_size(): bit_count = bit count in upper bits and predictor in lower bits.
        else if (stream_header_length == 40 + packed_table_size) {
            unsigned char predictor_code = 0;
            switch (this->predictor) {
                case predictor_type::classic:   return false;
                case predictor_type::left:      predictor_code = 1 + (this->decorrelated == true); break;
                case predictor_type::gradient:  predictor_code = 3; break;
                case predictor_type::median:    predictor_code = 4; break;
                default:                        return false;
            }
            bit_count = ((channels * 8) & ~0x0007) | (predictor_code);
            packed_table_index = 40;
        }
        // if size == 40 + 4 + get_packed_table_size(): bit_count = 0.
        else if (stream_header_length == 40 + 4 + packed_table_size) {
            bit_count = channels * 8;
            packed_table_index = 44;
        }
        else {
            return false;
        }
        copy_bytes(&bit_count, &stream_header_data[14], 2);

        const char* compression_identifier = "HFYU";
        copy_bytes(compression_identifier, &stream_header_data[16], 4);
        const unsigned int image_size = channels * this->width * this->height;
        copy_bytes(&image_size, &stream_header_data[20], 4);
        const int horizontal_pixels_per_meter = 0;
        copy_bytes(&horizontal_pixels_per_meter, &stream_header_data[24], 4);
        const int vertical_pixels_per_meter = 0;
        copy_bytes(&vertical_pixels_per_meter, &stream_header_data[28], 4);
        const unsigned int colours_used = 0;
        copy_bytes(&colours_used, &stream_header_data[32], 4);
        const unsigned int colours_important = 0;
        copy_bytes(&colours_important, &stream_header_data[36], 4);

        // No tables or extradata in header.
        if (stream_header_length == 40) {
            return true;
        }

        // Tables and extradata in header
        if (stream_header_length == 40 + 4 + packed_table_size) {
            unsigned char method = 0;
            switch (this->predictor) {
                case predictor_type::classic:   return false;
                case predictor_type::left:      method = 0; break;
                case predictor_type::gradient:  method = 1; break;
                case predictor_type::median:    method = 2; break;
                default:                        return false;
            }
            if (this->decorrelated) {
                method |= 0x40;
            }
            copy_bytes(&method, &stream_header_data[40], 1);
            const unsigned char real_bit_count = channels * 8;
            copy_bytes(&real_bit_count, &stream_header_data[41], 1);
            const unsigned char interlaced = this->interlaced;
            copy_bytes(&interlaced, &stream_header_data[42], 1);
            const unsigned char unused = 0;
            copy_bytes(&unused, &stream_header_data[43], 1);
        }

        // Runlength compress table data of bit lengths per code.
        // Stored in these orders:
        //  - YUV: Y table, U table, V table
        //  - RGB (correlated): B table, G table, R table
        //  - RGB (decorrelated): B-G table, G table, R-G table
        // Note: For RGBA data the R or R-G table is used for the alpha channel.
        {
            unsigned int data_index = packed_table_index;
            for (int channel_index = 0; channel_index < 3; ++channel_index) {
                for (int table_index = 0; table_index < 256;) {
                    const unsigned char value = this->tables[channel_index].shift[table_index];
                    const int start_index = table_index;
                    for (++table_index; table_index < 256 - 1; ++table_index) {
                        if (value != this->tables[channel_index].shift[table_index]) {
                            break;
                        }
                    }
                    const unsigned char repetitions = table_index - start_index;
                    if (repetitions < 8) {
                        stream_header_data[data_index++] = (repetitions << 5) | (value & 0x1F);
                    }
                    else {
                        stream_header_data[data_index++] = (value & 0x1F);
                        stream_header_data[data_index++] = repetitions;
                    }
                }
            }
            // Should be at least one null byte at the end.
            stream_header_data[data_index++] = 0;
        }

        return true;
    }

public:
    bool is_valid() const {
        return this->valid;
    }

    int get_image_width() const {
        if (!this->is_valid()) {
            return 0;
        }
        return this->width;
    }

    int get_image_height() const {
        if (!this->is_valid()) {
            return 0;
        }
        return this->height;
    }

    bool is_interlaced() const {
        if (!this->is_valid()) {
            return false;
        }
        return this->interlaced;
    }

    bool is_decorrelated() const {
        if (!this->is_valid()) {
            return false;
        }
        return this->decorrelated;
    }

    format_type get_image_format() const {
        if (!this->is_valid()) {
            return format_type::yuyv;
        }
        return this->format;
    }

    predictor_type get_image_predictor() const {
        if (!this->is_valid()) {
            return predictor_type::classic;
        }
        return this->predictor;
    }

    unsigned long long int get_decoded_image_size() const {
        if (!this->is_valid()) {
            return 0;
        }
        unsigned int channel_bytes = 0;
        switch (this->format) {
            case format_type::yuyv: {
                channel_bytes = 2;
            } break;
            case format_type::bgr: {
                channel_bytes = 3;
            } break;
            case format_type::bgra: {
                channel_bytes = 4;
            } break;
        }
        return this->height * this->width * channel_bytes;
    }

    unsigned int get_packed_table_size() const {
        if (!this->is_valid()) {
            return 0;
        }
        unsigned int packed_table_size = 0;
        for (int channel_index = 0; channel_index < 3; ++channel_index) {
            for (int table_index = 0; table_index < 256;) {
                const unsigned char value = this->tables[channel_index].shift[table_index];
                const int start_index = table_index;
                for (++table_index; table_index < 256 - 1; ++table_index) {
                    if (value != this->tables[channel_index].shift[table_index]) {
                        break;
                    }
                }
                const unsigned char repetitions = table_index - start_index;
                packed_table_size += 1 + (repetitions >= 8);
            }
        }
        // Should be at least one null byte at the end.
        ++packed_table_size;
        return packed_table_size;
    }

public:
    bool encode(
        const unsigned char* decoded_data,
        unsigned long long int decoded_length,
        unsigned char* encoded_data,
        unsigned long long int& encoded_length
    ) const {
        if (!this->is_valid()) {
            return false;
        }
        if ((encoded_data == nullptr) || (encoded_length < this->get_decoded_image_size()) || (decoded_data == nullptr) || (decoded_length < this->get_decoded_image_size())) {
            return false;
        }

        // Initially copy the decoded image so it can be processed in place.
        unsigned char* buffer_data = new unsigned char[this->get_decoded_image_size()];
        copy_bytes(decoded_data, buffer_data, this->get_decoded_image_size());

        switch (this->format) {
            case format_type::yuyv: {
                // Predictor values start from the second Y.
                unsigned char predictor_values[3] = {
                    buffer_data[2], buffer_data[1], buffer_data[3]
                };
                // Predictors are in Y U Y V order.
                unsigned char* predictors[4] = {
                    &predictor_values[0], &predictor_values[1], &predictor_values[0], &predictor_values[2]
                };
                switch (this->predictor) {
                    case predictor_type::classic:
                    case predictor_type::left: {
                        predict_left(buffer_data, &predictors[0]);
                    } break;
                    case predictor_type::gradient: {
                        predict_gradient(buffer_data);
                        predict_left(buffer_data, &predictors[0]);
                    } break;
                    case predictor_type::median: {
                        predict_median(buffer_data, &predictors[0]);
                    } break;
                }
                // Data is in Y U Y V order.
                const table_type* channel_tables[4] = {
                    &this->tables[0], &this->tables[1], &this->tables[0], &this->tables[2]
                };
                if (!encode_hfyu(buffer_data, encoded_data, encoded_length, &channel_tables[0])) {
                    delete[] buffer_data;
                    return false;
                }
            } break;

            case format_type::bgr:
            case format_type::bgra: {
                flip(buffer_data);
                // First pixel is in B G R (A) order.
                unsigned char predictor_values[4] = {
                    buffer_data[0], buffer_data[1], buffer_data[2], buffer_data[3]
                };
                if (this->decorrelated) {
                    // When decorrelated have to subtract G from the B and R channels.
                    predictor_values[0] -= predictor_values[1];
                    predictor_values[2] -= predictor_values[1];
                }
                // Predictors are in B G R (A) order.
                unsigned char* predictors[4] = {
                    &predictor_values[0], &predictor_values[1], &predictor_values[2], &predictor_values[3]
                };
                if (this->decorrelated) {
                    // When decorrelated predictors are in G B-G R-G (A) order.
                    unsigned char* temp = predictors[0];
                    predictors[0] = predictors[1];
                    predictors[1] = temp;
                }
                switch (this->predictor) {
                    case predictor_type::classic:
                    case predictor_type::left: {
                        if (this->decorrelated) {
                            decorrelate(buffer_data);
                        }
                        predict_left(buffer_data, &predictors[0]);
                    } break;
                    case predictor_type::gradient: {
                        predict_gradient(buffer_data);
                        if (this->decorrelated) {
                            decorrelate(buffer_data);
                        }
                        predict_left(buffer_data, &predictors[0]);
                    } break;
                    case predictor_type::median: {
                        delete[] buffer_data;
                        return false;
                    } break;
                }
                // Data is in B G R (A) order.
                const table_type* channel_tables[4] = {
                    &this->tables[0], &this->tables[1], &this->tables[2], &this->tables[2]
                };
                if (this->decorrelated) {
                    // When decorrelated data is in G B-G R-G (A) order, except for the first pixel.
                    const table_type* temp = channel_tables[0];
                    channel_tables[0] = channel_tables[1];
                    channel_tables[1] = temp;
                }
                if (!encode_hfyu(buffer_data, encoded_data, encoded_length, &channel_tables[0])) {
                    delete[] buffer_data;
                    return false;
                }
            } break;
        }

        delete[] buffer_data;
        return true;
    }

    bool decode(
        const unsigned char* encoded_data,
        unsigned long long int encoded_length,
        unsigned char* decoded_data,
        unsigned long long int& decoded_length
    ) const {
        if (!this->is_valid()) {
            return false;
        }
        if ((encoded_data == nullptr) || (encoded_length == 0) || (decoded_data == nullptr) || (decoded_length < this->get_decoded_image_size())) {
            return false;
        }

        switch (this->format) {
            case format_type::yuyv: {
                // Data is in Y U Y V order.
                const table_type* channel_tables[4] = {
                    &this->tables[0], &this->tables[1], &this->tables[0], &this->tables[2]
                };
                if (!decode_hfyu(encoded_data, encoded_length, decoded_data, &channel_tables[0])) {
                    return false;
                }
                // Predictor values start from the second Y.
                unsigned char predictor_values[3] = {
                    decoded_data[2], decoded_data[1], decoded_data[3]
                };
                // Predictors are in Y U Y V order.
                unsigned char* predictors[4] = {
                    &predictor_values[0], &predictor_values[1], &predictor_values[0], &predictor_values[2]
                };
                switch (this->predictor) {
                    case predictor_type::classic:
                    case predictor_type::left: {
                        unpredict_left(decoded_data, &predictors[0]);
                    } break;
                    case predictor_type::gradient: {
                        unpredict_left(decoded_data, &predictors[0]);
                        unpredict_gradient(decoded_data);
                    } break;
                    case predictor_type::median: {
                        unpredict_median(decoded_data, &predictors[0]);
                    } break;
                }
                decoded_length = this->get_decoded_image_size();
            } break;

            case format_type::bgr:
            case format_type::bgra: {
                // Data is in B G R (A) order.
                const table_type* channel_tables[4] = {
                    &this->tables[0], &this->tables[1], &this->tables[2], &this->tables[2]
                };
                if (this->decorrelated) {
                    // When decorrelated data is in G B-G R-G (A) order, except for the first pixel.
                    const table_type* temp = channel_tables[0];
                    channel_tables[0] = channel_tables[1];
                    channel_tables[1] = temp;
                }
                if (!decode_hfyu(encoded_data, encoded_length, decoded_data, &channel_tables[0])) {
                    return false;
                }
                // First pixel is in B G R (A) order.
                unsigned char predictor_values[4] = {
                    decoded_data[0], decoded_data[1], decoded_data[2], decoded_data[3]
                };
                if (this->decorrelated) {
                    // When decorrelated have to subtract G from the B and R channels.
                    predictor_values[0] -= predictor_values[1];
                    predictor_values[2] -= predictor_values[1];
                }
                // Predictors are in B G R (A) order.
                unsigned char* predictors[4] = {
                    &predictor_values[0], &predictor_values[1], &predictor_values[2], &predictor_values[3]
                };
                if (this->decorrelated) {
                    // When decorrelated predictors are in G B-G R-G (A) order.
                    unsigned char* temp = predictors[0];
                    predictors[0] = predictors[1];
                    predictors[1] = temp;
                }
                switch (this->predictor) {
                    case predictor_type::classic:
                    case predictor_type::left: {
                        unpredict_left(decoded_data, &predictors[0]);
                        if (this->decorrelated) {
                            recorrelate(decoded_data);
                        }
                    } break;
                    case predictor_type::gradient: {
                        unpredict_left(decoded_data, &predictors[0]);
                        if (this->decorrelated) {
                            recorrelate(decoded_data);
                        }
                        unpredict_gradient(decoded_data);
                    } break;
                    case predictor_type::median: {
                        return false;
                    } break;
                }
                flip(decoded_data);
                decoded_length = this->get_decoded_image_size();
            } break;
        }

        return true;
    }

private:
    bool encode_hfyu(
        const unsigned char* decompressed,
        unsigned char* compressed,
        unsigned long long int& compressed_size,
        const table_type** channel_tables
    ) const {
        const int width = (this->format == format_type::yuyv) ? (this->width / 2) : this->width;
        const int height = this->height;
        const int channels = (this->format == format_type::yuyv) ? 4 : ((this->format == format_type::bgr) ? 3 : 4);

        unsigned int bit_stream = 0;
        unsigned int stream_index = 0;
        unsigned int shift_index = 0;
        for (int y = 0; y < height; ++y) {
            for (int x = 0; x < width; ++x) {
                // Handle the very first pixel separately, it is stored uncompressed.
                if ((y == 0) && (x == 0)) {
                    // For rgb streams there is still fours bytes for the first pixel so the first byte is cleared.
                    if (this->format == format_type::bgr) {
                        *compressed++ = 0;
                    }
                    for (int channel = 0; channel < channels; ++channel) {
                        *compressed++ = *decompressed++;
                    }
                    stream_index += 32;
                    continue;
                }

                for (int channel = 0; channel < channels; ++channel) {
                    if ((stream_index + 32) >= static_cast<unsigned int>(height * width * channels * 8)) {
                        fprintf(stderr, "Failed to encode frame, result would be larger than original.\n");
                        return false;
                    }

                    const unsigned char decoded = *decompressed++;
                    const unsigned char shift = channel_tables[channel]->shift[decoded];
                    const unsigned int add = channel_tables[channel]->add_shifted[decoded] >> (32 - shift);

                    shift_index += shift;
                    if (shift_index < 32) {
                        bit_stream = (bit_stream << shift) | add;
                        continue;
                    }

                    shift_index -= 32;
                    const unsigned char shift_remainder = shift - shift_index;
                    bit_stream = (bit_stream << shift_remainder) | (add >> shift_index);
                    *compressed++ = (bit_stream >>  0) & 0xFF;
                    *compressed++ = (bit_stream >>  8) & 0xFF;
                    *compressed++ = (bit_stream >> 16) & 0xFF;
                    *compressed++ = (bit_stream >> 24) & 0xFF;
                    bit_stream = add;
                    stream_index += 32;
                }
            }
        }
        if (shift_index > 0) {
            bit_stream = bit_stream << (32 - shift_index);
            *compressed++ = (bit_stream >>  0) & 0xFF;
            *compressed++ = (bit_stream >>  8) & 0xFF;
            *compressed++ = (bit_stream >> 16) & 0xFF;
            *compressed++ = (bit_stream >> 24) & 0xFF;
            stream_index += 32;
        }
        compressed_size = stream_index / 8;
        return true;
    }

    bool decode_hfyu(
        const unsigned char* compressed,
        unsigned long long int compressed_size,
        unsigned char* decompressed,
        const table_type** channel_tables
    ) const {
        const int width = (this->format == format_type::yuyv) ? (this->width / 2) : this->width;
        const int height = this->height;
        const int channels = (this->format == format_type::yuyv) ? 4 : ((this->format == format_type::bgr) ? 3 : 4);

        unsigned int stream_index = 0;
        for (int y = 0; y < height; ++y) {
            for (int x = 0; x < width; ++x) {
                // Handle the very first pixel separately, it is stored uncompressed.
                if ((y == 0) && (x == 0)) {
                    // For rgb streams there is still fours bytes for the first pixel so the first byte is dropped.
                    // This is achieved by using a boolean test which when cast to int can skip the first channel index.
                    for (int channel = (this->format == format_type::bgr); channel < 4; ++channel) {
                        *decompressed++ = compressed[channel];
                    }
                    stream_index += 32;
                    continue;
                }

                for (int channel = 0; channel < channels; ++channel) {
                    // Calculate the indexes.
                    // block_index: ignoring the bottom five bits (meaning we could be off by up to 31 bits).
                    // fine_index:  just containing this fine offset (offset up to 31 bits).
                    // The block_index is multiplied by four as we're indexing into an 8 bit array rather than a 32 bit one.
                    const unsigned int block_index = (stream_index >> 5) * 4;
                    const unsigned int fine_index  = (stream_index & 0b00011111);

                    // Extract data the data of the next eight bytes from this position.
                    unsigned long long int block_data = 0;
                    if (block_index + 7 < compressed_size) {
                        block_data =
                            static_cast<unsigned long long int>(compressed[block_index + 3 + 0]) << 56 |
                            static_cast<unsigned long long int>(compressed[block_index + 2 + 0]) << 48 |
                            static_cast<unsigned long long int>(compressed[block_index + 1 + 0]) << 40 |
                            static_cast<unsigned long long int>(compressed[block_index + 0 + 0]) << 32 |
                            static_cast<unsigned long long int>(compressed[block_index + 3 + 4]) << 24 |
                            static_cast<unsigned long long int>(compressed[block_index + 2 + 4]) << 16 |
                            static_cast<unsigned long long int>(compressed[block_index + 1 + 4]) <<  8 |
                            static_cast<unsigned long long int>(compressed[block_index + 0 + 4]) <<  0 ;
                    }
                    else if (block_index + 3 < compressed_size) {
                        block_data =
                            static_cast<unsigned long long int>(compressed[block_index + 3 + 0]) << 56 |
                            static_cast<unsigned long long int>(compressed[block_index + 2 + 0]) << 48 |
                            static_cast<unsigned long long int>(compressed[block_index + 1 + 0]) << 40 |
                            static_cast<unsigned long long int>(compressed[block_index + 0 + 0]) << 32 ;
                    }
                    else {
                        std::fprintf(stderr, "Invalid compressed frame, data needed %llu bytes over.\n", block_index - compressed_size);
                        return false;
                    }

                    // Shift the extracted data by the previously ignored bottom five bits.
                    const unsigned long long int fine_data = block_data << fine_index;

                    // Then extract the most significant four bytes as these will contain the code.
                    const unsigned int code = fine_data >> 32;

                    // Find the index of the most significant bit, ensure an index is found by bitwise ORing the least significant bit.
                    const int tree_index = find_most_significant_bit_index(code | 1);

                    const unsigned char decoded = channel_tables[channel]->pointers[tree_index][((code & ~(1u << tree_index)) >> channel_tables[channel]->pointers[tree_index][0]) + 1];
                    const unsigned char advance = channel_tables[channel]->shift[decoded];

                    if (advance == 0) {
                        fprintf(stderr, "Invalid compressed frame, failed to advance.\n");
                        return false;
                    }

                    *decompressed++ = decoded;
                    stream_index += advance;
                }
            }
        }
        return true;
    }

    void predict_left(
        unsigned char* frame,
        unsigned char** predictors
    ) const {
        const int width = (this->format == format_type::yuyv) ? (this->width / 2) : this->width;
        const int height = this->height;
        const int channels = (this->format == format_type::yuyv) ? 4 : ((this->format == format_type::bgr) ? 3 : 4);

        for (int y = 0; y < height; ++y) {
            for (int x = 0; x < width; ++x) {
                if ((y == 0) && (x == 0)) {
                    frame += channels;
                    continue;
                }
                for (int channel = 0; channel < channels; ++channel) {
                    *frame -= *(predictors[channel]);
                    *(predictors[channel]) += *frame;
                    ++frame;
                }
            }
        }
    }

    void unpredict_left(
        unsigned char* frame,
        unsigned char** predictors
    ) const {
        const int width = (this->format == format_type::yuyv) ? (this->width / 2) : this->width;
        const int height = this->height;
        const int channels = (this->format == format_type::yuyv) ? 4 : ((this->format == format_type::bgr) ? 3 : 4);

        for (int y = 0; y < height; ++y) {
            for (int x = 0; x < width; ++x) {
                if ((y == 0) && (x == 0)) {
                    frame += channels;
                    continue;
                }
                for (int channel = 0; channel < channels; ++channel) {
                    *(predictors[channel]) += *frame;
                    *frame++ = *(predictors[channel]);
                }
            }
        }
    }

    void predict_gradient(
        unsigned char* frame
    ) const {
        const int width = (this->format == format_type::yuyv) ? (this->width / 2) : this->width;
        const int height = this->height;
        const int channels = (this->format == format_type::yuyv) ? 4 : ((this->format == format_type::bgr) ? 3 : 4);

        frame += (channels * width * (height - 1));
        for (int y = height - 1; y >= (1 + this->interlaced); --y) {
            for (int x = 0; x < width; ++x) {
                for (int channel = 0; channel < channels; ++channel) {
                    *frame -= *(frame - (channels * width * (1 + this->interlaced)));
                    ++frame;
                }
            }
            frame -= (channels * width * 2);
        }
    }

    void unpredict_gradient(
        unsigned char* frame
    ) const {
        const int width = (this->format == format_type::yuyv) ? (this->width / 2) : this->width;
        const int height = this->height;
        const int channels = (this->format == format_type::yuyv) ? 4 : ((this->format == format_type::bgr) ? 3 : 4);

        frame += (channels * width * (1 + this->interlaced));
        for (int y = (1 + this->interlaced); y < height; ++y) {
            for (int x = 0; x < width; ++x) {
                for (int channel = 0; channel < channels; ++channel) {
                    *frame += *(frame - (channels * width * (1 + this->interlaced)));
                    ++frame;
                }
            }
        }
    }

    void predict_median(
        unsigned char* frame,
        unsigned char** predictors
    ) const {
        constexpr static const auto median = [](unsigned char value0, unsigned char value1, unsigned char value2) {
            if (value0 > value1) { unsigned char temp = value0; value0 = value1; value1 = temp; }
            if (value1 > value2) { unsigned char temp = value1; value1 = value2; value2 = temp; }
            if (value0 > value1) { unsigned char temp = value0; value0 = value1; value1 = temp; }
            return value1;
        };

        const int width = (this->format == format_type::yuyv) ? (this->width / 2) : this->width;
        const int height = this->height;
        const int channels = (this->format == format_type::yuyv) ? 4 : ((this->format == format_type::bgr) ? 3 : 4);

        frame += (channels * width * height - 1);
        for (int y = height - 1; y >= 0; --y) {
            for (int x = width - 1; x >= 0; --x) {
                // First pixel is not predicted.
                if ((y == 0) && (x == 0)) {
                    // Handled in forwards loop, so skip in this reverse loop.
                    frame -= channels;
                    continue;
                }
                // First row(s) is/are predict left.
                if (y < (1 + this->interlaced)) {
                    // Handled in forwards loop, so skip in this reverse loop.
                    frame -= channels;
                    continue;
                }
                // First pixel of next row is also predict left.
                if ((y == (1 + this->interlaced)) && (x < 2)) {
                    // Handled in forwards loop, so skip in this reverse loop.
                    frame -= channels;
                    continue;
                }
                // Remainder are predicted from the median.
                for (int channel = channels - 1; channel >= 0; --channel) {
                    // TODO: Move channel_jump to a lookup table.
                    const int channel_jump = (this->format != format_type::yuyv) ? (channels) : ((channel % 2 == 0) ? (2) : (4));
                    const unsigned char pixel_left = *(frame - channel_jump);
                    const unsigned char pixel_above = *(frame - (width * channels));
                    const unsigned char pixel_above_left = *(frame - (width * channels) - channel_jump);
                    *frame-- -= median(pixel_left, pixel_above, pixel_left + pixel_above - pixel_above_left);
                }
            }
        }

        // Handle the other types of prediction.
        ++frame;
        for (int y = 0; y < height; ++y) {
            for (int x = 0; x < width; ++x) {
                // First four pixels are not predicted.
                if ((y == 0) && (x == 0)) {
                    frame += channels;
                    continue;
                }
                // First row(s) is/are predict left.
                if (y < (1 + this->interlaced)) {
                    for (int channel = 0; channel < channels; ++channel) {
                        *frame -= *(predictors[channel]);
                        *(predictors[channel]) += *frame;
                        ++frame;
                    }
                    continue;
                }
                // First four pixels of next row are also predict left.
                if ((y == (1 + this->interlaced)) && (x < 2)) {
                    for (int channel = 0; channel < channels; ++channel) {
                        *frame -= *(predictors[channel]);
                        *(predictors[channel]) += *frame;
                        ++frame;
                    }
                    continue;
                }
                // Remainder were predicted from the median in the reverse loop.
                ++frame;
            }
        }
    }

    void unpredict_median(
        unsigned char* frame,
        unsigned char** predictors
    ) const {
        constexpr static const auto median = [](unsigned char value0, unsigned char value1, unsigned char value2) {
            if (value0 > value1) { unsigned char temp = value0; value0 = value1; value1 = temp; }
            if (value1 > value2) { unsigned char temp = value1; value1 = value2; value2 = temp; }
            if (value0 > value1) { unsigned char temp = value0; value0 = value1; value1 = temp; }
            return value1;
        };

        const int width = (this->format == format_type::yuyv) ? (this->width / 2) : this->width;
        const int height = this->height;
        const int channels = (this->format == format_type::yuyv) ? 4 : ((this->format == format_type::bgr) ? 3 : 4);

        for (int y = 0; y < height; ++y) {
            for (int x = 0; x < width; ++x) {
                // First pixel is not predicted.
                if ((y == 0) && (x == 0)) {
                    frame += channels;
                    continue;
                }
                // First row(s) is/are predict left.
                if (y < (1 + this->interlaced)) {
                    for (int channel = 0; channel < channels; ++channel) {
                        *(predictors[channel]) += *frame;
                        *frame++ = *(predictors[channel]);
                    }
                    continue;
                }
                // First pixel of next row is also predict left.
                if ((y == (1 + this->interlaced)) && (x < 2)) {
                    for (int channel = 0; channel < channels; ++channel) {
                        *(predictors[channel]) += *frame;
                        *frame++ = *(predictors[channel]);
                    }
                    continue;
                }
                // Remainder are predicted from the median.
                for (int channel = 0; channel < channels; ++channel) {
                    // TODO: Move channel_jump to a lookup table.
                    const int channel_jump = (this->format != format_type::yuyv) ? (channels) : ((channel % 2 == 0) ? (2) : (4));
                    const unsigned char pixel_left = *(frame - channel_jump);
                    const unsigned char pixel_above = *(frame - (width * channels));
                    const unsigned char pixel_above_left = *(frame - (width * channels) - channel_jump);
                    *frame++ += median(pixel_left, pixel_above, pixel_left + pixel_above - pixel_above_left);
                }
            }
        }
    }

    void decorrelate(
        unsigned char* frame
    ) const {
        const int width = (this->format == format_type::yuyv) ? (this->width / 2) : this->width;
        const int height = this->height;
        const int channels = (this->format == format_type::yuyv) ? 4 : ((this->format == format_type::bgr) ? 3 : 4);

        for (int y = 0; y < height; ++y) {
            for (int x = 0; x < width; ++x) {
                // Handle the very first pixel separately, it is stored correlated.
                if ((y == 0) && (x == 0)) {
                    frame += channels;
                    continue;
                }
                // The correlated input data is stored in [B, G, R, (A)] order.
                // The decorreleated output data is stored in [G, B-G, R-G, (A)] order.
                const unsigned char b = frame[0];
                const unsigned char g = frame[1];
                const unsigned char r = frame[2];
                *frame++ = g;
                *frame++ = b - g;
                *frame++ = r - g;
                if (channels == 4) {
                    // Alpha is stored unmodified.
                    ++frame;
                }
            }
        }
    }

    void recorrelate(
        unsigned char* frame
    ) const {
        const int width = (this->format == format_type::yuyv) ? (this->width / 2) : this->width;
        const int height = this->height;
        const int channels = (this->format == format_type::yuyv) ? 4 : ((this->format == format_type::bgr) ? 3 : 4);

        for (int y = 0; y < height; ++y) {
            for (int x = 0; x < width; ++x) {
                // Handle the very first pixel separately, it is stored already correlated.
                if ((y == 0) && (x == 0)) {
                    frame += channels;
                    continue;
                }
                // The decorreleated input data is stored in [G, B-G, R-G, (A)] order.
                // The correlated output data is stored in [B, G, R, (A)] order.
                const unsigned char g = frame[0];
                const unsigned char b_g = frame[1];
                const unsigned char r_g = frame[2];
                *frame++ = b_g + g;
                *frame++ = g;
                *frame++ = r_g + g;
                if (channels == 4) {
                    // Alpha is stored unmodified.
                    ++frame;
                }
            }
        }
    }

    void flip(
        unsigned char* frame
    ) const {
        const int width = (this->format == format_type::yuyv) ? (this->width / 2) : this->width;
        const int height = this->height;
        const int channels = (this->format == format_type::yuyv) ? 4 : ((this->format == format_type::bgr) ? 3 : 4);

        unsigned char* flipped = frame + channels * width * (height - 1);
        for (int y = 0; y < height / 2; ++y) {
            for (int x = 0; x < width; ++x) {
                for (int channel = 0; channel < channels; ++channel) {
                    unsigned char temp = *flipped;
                    *flipped++ = *frame;
                    *frame++ = temp;
                }
            }
            flipped -= 2 * channels * width;
        }
    }
};
